/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/init.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/climate.json":
/*!**************************!*\
  !*** ./src/climate.json ***!
  \**************************/
/*! exports provided: climates, default */
/***/ (function(module) {

eval("module.exports = {\"climates\":[{\"name\":\"Jungle\",\"climate\":\"bear grylls approved temperature\",\"reference city\":\"Rio de Janeiro\",\"grid\":[{\"name\":\"Row1\",\"Columns\":[\"1\",\"0\",\"0\",\"0\",\"1\",\"1\",\"0\",\"0\",\"0\",\"1\"]},{\"name\":\"Row2\",\"Columns\":[\"1\",\"0\",\"0\",\"1\",\"0\",\"0\",\"1\",\"0\",\"0\",\"1\"]},{\"name\":\"Row3\",\"Columns\":[\"1\",\"0\",\"1\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\"]},{\"name\":\"Row4\",\"Columns\":[\"1\",\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"1\"]},{\"name\":\"Row5\",\"Columns\":[\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\"]},{\"name\":\"Row6\",\"Columns\":[\"1\",\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\"]},{\"name\":\"Row7\",\"Columns\":[\"1\",\"0\",\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\"]},{\"name\":\"Row8\",\"Columns\":[\"1\",\"0\",\"0\",\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\"]},{\"name\":\"Row9\",\"Columns\":[\"1\",\"0\",\"0\",\"0\",\"1\",\"1\",\"0\",\"0\",\"0\",\"1\"]},{\"name\":\"Row10\",\"Columns\":[\"1\",\"0\",\"0\",\"0\",\"1\",\"1\",\"0\",\"0\",\"0\",\"1\"]}]},{\"name\":\"IcePole\",\"climate\":\"sub-zero cold\",\"reference city\":\"Amsterdam\",\"grid\":[{\"name\":\"Row1\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"1\",\"1\",\"0\",\"0\",\"0\",\"1\"]},{\"name\":\"Row2\",\"Columns\":[\"0\",\"0\",\"0\",\"1\",\"0\",\"0\",\"1\",\"0\",\"0\",\"1\"]},{\"name\":\"Row3\",\"Columns\":[\"0\",\"0\",\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\"]},{\"name\":\"Row4\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"1\"]},{\"name\":\"Row5\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\"]},{\"name\":\"Row6\",\"Columns\":[\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row7\",\"Columns\":[\"1\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row8\",\"Columns\":[\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row9\",\"Columns\":[\"1\",\"0\",\"0\",\"0\",\"1\",\"1\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row10\",\"Columns\":[\"1\",\"0\",\"0\",\"0\",\"1\",\"1\",\"0\",\"0\",\"0\",\"0\"]}]},{\"name\":\"Sjahari\",\"climate\":\"burning hot\",\"reference city\":\"Marrakech\",\"grid\":[{\"name\":\"Row1\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row2\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row3\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"0\"]},{\"name\":\"Row4\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row5\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row6\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row7\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row8\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row9\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row10\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]}]}]};\n\n//# sourceURL=webpack:///./src/climate.json?");

/***/ }),

/***/ "./src/controllers/monsterController.js":
/*!**********************************************!*\
  !*** ./src/controllers/monsterController.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let monsterModel = __webpack_require__(/*! ../models/monsterModel.js */ \"./src/models/monsterModel.js\"),\r\n    monsterView = __webpack_require__(/*! ../views/monsterView.js */ \"./src/views/monsterView.js\"),\r\n    terrainModel = __webpack_require__(/*! ../models/terrainModel.js */ \"./src/models/terrainModel.js\"),\r\n    terrainView = __webpack_require__(/*! ../views/terrainView.js */ \"./src/views/terrainView.js\"),\r\n    configuratorView = __webpack_require__(/*! ../views/configuratorView.js */ \"./src/views/configuratorView.js\");\r\n\r\nclass monsterController {\r\n\r\n    constructor() {\r\n        \r\n        terrainView.setupMonsterConfigurator( this );\r\n        monsterView.setupDrawingBoard( this );\r\n\r\n    }\r\n\r\n    addMonstersToTerrain( climate ) {\r\n\r\n        let monsterLocations = monsterModel.getMonsterLocations( climate );\r\n        monsterView.drawMonsters( monsterLocations, this );\r\n\r\n    }\r\n\r\n    createNewMonster() {\r\n\r\n        if ( monsterModel.getMonsterInDesigner() === false ) {\r\n\r\n            let id = monsterModel.generateMonsterID();\r\n            monsterModel.addMonsterToLocation( id );\r\n\r\n            configuratorView.generateNewMonster( id, this );\r\n            this.updateMonsterProperties( id, configuratorView.getValuesAsObject() );\r\n    \r\n            let climate = terrainModel.getClimateByName( terrainModel.getCurrentClimate() );\r\n            this.addMonstersToTerrain( climate );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    removeMonsterInDesigner() {\r\n\r\n        let monster = monsterModel.getMonsterInDesigner();\r\n        if ( monsterModel.getMonsterInDesigner() === false ) { return; }\r\n\r\n        monsterModel.removeMonsterInDesigner( monster.id );\r\n        monsterView.removeMonsterInDesigner();\r\n\r\n        configuratorView.updateConfigurator( false, this );\r\n\r\n    }\r\n\r\n    updateMonsterProperties( id, properties ) {\r\n\r\n        monsterModel.saveMonsterProperties( id, properties );\r\n\r\n        let climate = terrainModel.getClimateByName( terrainModel.getCurrentClimate() );\r\n        let monsterLocations = monsterModel.getMonsterLocations( climate );\r\n        monsterView.drawMonsters( monsterLocations, this );\r\n\r\n    }\r\n\r\n    retrieveMonsterProperties( id ) {\r\n\r\n        return monsterModel.getMonsterProperties( id );\r\n\r\n    }\r\n\r\n    getAugementedPowerLvl( monsterInfo ) {\r\n        let powerLevel = monsterInfo.monsterPowerLvl,\r\n            type = monsterInfo.typeOfMonster,\r\n            weather = terrainModel.getWeather();\r\n\r\n            \r\n        if ( type.toLowerCase() == 'water' && ( weather == 'rain' || weather == 'thunderstorm' || weather == 'drizzle' || weather == 'clouds' ) ) {\r\n            powerLevel = +powerLevel + +20;\r\n        }\r\n\r\n        if ( type.toLowerCase() == 'fire' && ( weather == 'smoke' || weather == 'ash' ) ) {\r\n            powerLevel = +powerLevel + +20;\r\n        }\r\n\r\n        if ( type.toLowerCase() == 'earth' && ( weather == 'dust' || weather == 'sand' ) ) {\r\n            powerLevel = +powerLevel + +20;\r\n        }\r\n\r\n        if ( type.toLowerCase() == 'wind' && ( weather == 'tornado' || weather == 'squall' ) ) {\r\n            powerLevel = +powerLevel + +20;\r\n        }\r\n        \r\n        return (powerLevel > 100 ? 100 : powerLevel);\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = new monsterController();\n\n//# sourceURL=webpack:///./src/controllers/monsterController.js?");

/***/ }),

/***/ "./src/controllers/terrainController.js":
/*!**********************************************!*\
  !*** ./src/controllers/terrainController.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let terrainModel = __webpack_require__(/*! ../models/terrainModel.js */ \"./src/models/terrainModel.js\"),\r\n    terrainView = __webpack_require__(/*! ../views/terrainView.js */ \"./src/views/terrainView.js\"),\r\n    monsterModel = __webpack_require__(/*! ../models/monsterModel.js */ \"./src/models/monsterModel.js\"),\r\n    monsterView = __webpack_require__(/*! ../views/monsterView.js */ \"./src/views/monsterView.js\"),\r\n    configuratorView = __webpack_require__(/*! ../views/configuratorView.js */ \"./src/views/configuratorView.js\");\r\n\r\nclass terrainController {\r\n\r\n    setInitClimate() {\r\n\r\n        let currentClimateName = terrainModel.getCurrentClimate();\r\n\r\n        this.setClimate( currentClimateName );\r\n        terrainView.setClimateChangeEventListeners( this );\r\n\r\n        terrainView.setWeatherEventListeners( this );\r\n\r\n        configuratorView.setConfiguratorEventListeners( this.monsterController );\r\n        \r\n        let monsterInDesigner = monsterModel.getMonsterInDesigner();\r\n        if ( monsterInDesigner != false ) {\r\n            configuratorView.loadMonsterData( monsterInDesigner, this.monsterController, false );\r\n        }\r\n    \r\n    }\r\n\r\n    setClimate( name ) {\r\n\r\n        terrainView.emptyField();\r\n        terrainView.drawField( monsterModel.getMonsterInDesigner() === false );\r\n\r\n        let climate = terrainModel.getClimateByName( name );\r\n\r\n        terrainModel.getWeatherFromClimate( this, climate, function( controller, weather ) {\r\n            if ( weather ) {\r\n                controller.setWeather( weather );\r\n            } else {\r\n                controller.setWeather( '...' );\r\n            }\r\n        });\r\n\r\n        terrainView.drawTerrain( climate );\r\n        \r\n        this.monsterController.addMonstersToTerrain( climate );\r\n        terrainView.setMonsterPositionEventListeners( this, climate );\r\n\r\n        terrainModel.setCurrentClimate( climate.name.toLowerCase() );\r\n\r\n    }\r\n\r\n    setWeather( weather ) {\r\n        \r\n        terrainView.setWeatherBadge( weather );\r\n        terrainModel.setWeather( weather.toLowerCase() );\r\n\r\n    }\r\n\r\n    setMonsterController( monsterController ) {\r\n        this.monsterController = monsterController;\r\n    }\r\n\r\n    monsterChangedPosition( id, x, y ) {\r\n        monsterModel.moveMonsterToLocation( terrainModel.getCurrentClimate(), id, x, y );\r\n        configuratorView.updateConfigurator( monsterModel.getMonsterInDesigner(), this.monsterController );\r\n\r\n        monsterView.reactToMove( x, y );\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = new terrainController();\n\n//# sourceURL=webpack:///./src/controllers/terrainController.js?");

/***/ }),

/***/ "./src/init.js":
/*!*********************!*\
  !*** ./src/init.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\r\n    console.log('webs3 - Simon Striekwold');\r\n\r\n    let terrainController = __webpack_require__(/*! ./controllers/terrainController.js */ \"./src/controllers/terrainController.js\");\r\n\r\n    let monsterController = __webpack_require__(/*! ./controllers/monsterController.js */ \"./src/controllers/monsterController.js\");\r\n\r\n    terrainController.setMonsterController( monsterController );\r\n\r\n    terrainController.setInitClimate();\n\n//# sourceURL=webpack:///./src/init.js?");

/***/ }),

/***/ "./src/libraries/barGraph.js":
/*!***********************************!*\
  !*** ./src/libraries/barGraph.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// Copyright 2011 William Malone (www.williammalone.com)\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction BarGraph(ctx) {\n\n  // Private properties and methods\n\t\n  var that = this;\n  var startArr;\n  var endArr;\n  var looping = false;\n\t\t\n  // Loop method adjusts the height of bar and redraws if neccessary\n\tvar loop = function () {\n\n\t  var delta;\n\t  var animationComplete = true;\n\n\t  // Boolean to prevent update function from looping if already looping\n\t  looping = true;\n\t  \n\t  // For each bar\n\t  for (var i = 0; i < endArr.length; i += 1) {\n\n\t\t// Change the current bar height toward its target height\n\t\tdelta = (endArr[i] - startArr[i]) / that.animationSteps;\n\t\tthat.curArr[i] += delta;\n\t\t// If any change is made then flip a switch\n\t\tif (delta) {\n\t\t  animationComplete = false;\n\t\t}\n\n\t\t\tif ( delta * delta < 0.000001 ) { that.curArr[i] = endArr[i]; }\n\t  }\n\t  // If no change was made to any bars then we are done\n\t  if (animationComplete) {\n\t\tlooping = false;\n\t  } else {\n\t\t// Draw and call loop again\n\t\tdraw(that.curArr);\n\t\tsetTimeout(loop, that.animationInterval / that.animationSteps);\n\t  }\n\t};\n\t\t\n  // Draw method updates the canvas with the current display\n\tvar draw = function (arr) {\n\t\t\t\t\t\t\t\n\t  var numOfBars = arr.length;\n\t  var barWidth;\n\t  var barHeight;\n\t  var border = 2;\n\t  var ratio;\n\t  var maxBarHeight;\n\t  var gradient;\n\t  var largestValue;\n\t  var graphAreaX = 0;\n\t  var graphAreaY = 0;\n\t  var graphAreaWidth = that.width;\n\t  var graphAreaHeight = that.height;\n\t  var i;\n\t  \n\t\t// Update the dimensions of the canvas only if they have changed\n\t  if (ctx.canvas.width !== that.width || ctx.canvas.height !== that.height) {\n\t\tctx.canvas.width = that.width;\n\t\tctx.canvas.height = that.height;\n\t  }\n\t\t\t\t\n\t  // Draw the background color\n\t  ctx.fillStyle = that.backgroundColor;\n\t  ctx.fillRect(0, 0, that.width, that.height);\n\t\t\t\t\t\n\t  // If x axis labels exist then make room\t\n\t  if (that.xAxisLabelArr.length) {\n\t\tgraphAreaHeight -= 40;\n\t  }\n\t\t\t\t\n\t  // Calculate dimensions of the bar\n\t  barWidth = graphAreaWidth / numOfBars - that.margin * 2;\n\t  maxBarHeight = graphAreaHeight - 25;\n\t\t\t\t\n\t  // Determine the largest value in the bar array\n\t  var largestValue = 8.5;\n\t  // for (i = 0; i < arr.length; i += 1) {\n\t\t// if (arr[i] > largestValue) {\n\t\t//   largestValue = arr[i];\t\n\t\t// }\n\t  // }\n\t  \n\t  // For each bar\n\t  for (i = 0; i < arr.length; i += 1) {\n\t\t// Set the ratio of current bar compared to the maximum\n\t\tif (that.maxValue) {\n\t\t  ratio = arr[i] / that.maxValue;\n\t\t} else {\n\t\t  ratio = arr[i] / largestValue;\n\t\t}\n\t\t\n\t\tbarHeight = ratio * maxBarHeight;\n\t  \n\t\t// Turn on shadow\n\t\tctx.shadowOffsetX = 2;\n\t\tctx.shadowOffsetY = 2;\n\t\tctx.shadowBlur = 2;\n\t\tctx.shadowColor = \"#999\";\n\t\t\t\t\t\t\n\t\t// Draw bar background\n\t\tctx.fillStyle = \"#333\";\t\t\t\n\t\tctx.fillRect(that.margin + i * that.width / numOfBars,\n\t\t  graphAreaHeight - barHeight,\n\t\t  barWidth,\n\t\t  barHeight);\n\t\t\t\n\t\t// Turn off shadow\n\t\tctx.shadowOffsetX = 0;\n\t\tctx.shadowOffsetY = 0;\n\t\tctx.shadowBlur = 0;\n\n\t\t// Draw bar color if it is large enough to be visible\n\t\tif (barHeight > border * 2) {\n\t\t\t// Create gradient\n\t\t\tgradient = ctx.createLinearGradient(0, 0, 0, graphAreaHeight);\n\t\t\tgradient.addColorStop(1-ratio, that.colors[i % that.colors.length]);\n\t\t\tgradient.addColorStop(1, \"#ffffff\");\n\n\t\t\tctx.fillStyle = gradient;\n\t\t\t// Fill rectangle with gradient\n\t\t\tctx.fillRect(that.margin + i * that.width / numOfBars + border,\n\t\t\t  graphAreaHeight - barHeight + border,\n\t\t\t  barWidth - border * 2,\n\t\t\t  barHeight - border * 2);\n\t\t}\n\n\t\t// Write bar value\n\t\tctx.fillStyle = \"#333\";\n\t\tctx.font = \"bold 12px sans-serif\";\n\t\tctx.textAlign = \"center\";\n\t\t// Use try / catch to stop IE 8 from going to error town\n\t\ttry {\n\t\t  ctx.fillText(parseInt(arr[i],10),\n\t\t\ti * that.width / numOfBars + (that.width / numOfBars) / 2,\n\t\t\tgraphAreaHeight - barHeight - 10);\n\t\t} catch (ex) {}\n\t\t// Draw bar label if it exists\n\t\tif (that.xAxisLabelArr[i]) {\t\t\t\t\t\n\t\t  // Use try / catch to stop IE 8 from going to error town\t\t\t\t\n\t\t  ctx.fillStyle = \"#333\";\n\t\t  ctx.font = \"bold 12px sans-serif\";\n\t\t  ctx.textAlign = \"center\";\n\t\t  try{\n\t\t\tctx.fillText(that.xAxisLabelArr[i],\n\t\t\t  i * that.width / numOfBars + (that.width / numOfBars) / 2,\n\t\t\t  that.height - 10);\n\t\t\t} catch (ex) {}\n\t\t  }\n\t\t}\n\t  };\n\n  // Public properties and methods\n\t\n  this.width = 300;\n  this.height = 150;\t\n  this.maxValue;\n  this.margin = 5;\n  this.colors = [\"purple\", \"red\", \"green\", \"yellow\"];\n  this.curArr = [];\n  this.backgroundColor = \"#fff\";\n  this.xAxisLabelArr = [];\n  this.yAxisLabelArr = [];\n  this.animationInterval = 100;\n  this.animationSteps = 10;\n\t\n  // Update method sets the end bar array and starts the animation\n\tthis.update = function (newArr) {\n\n\t  // If length of target and current array is different \n\t  if (that.curArr.length !== newArr.length) {\n\t\tthat.curArr = newArr;\n\t\tdraw(newArr);\n\t  } else {\n\t\t// Set the starting array to the current array\n\t\tstartArr = that.curArr;\n\t\t// Set the target array to the new array\n\t\tendArr = newArr;\n\t\t// Animate from the start array to the end array\n\t\tif (!looping) {\t\n\t\t  loop();\n\t\t}\n\t  }\n\t}; \n}\n\nmodule.exports = BarGraph;\n\n//# sourceURL=webpack:///./src/libraries/barGraph.js?");

/***/ }),

/***/ "./src/models/monsterModel.js":
/*!************************************!*\
  !*** ./src/models/monsterModel.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let terrainModel = __webpack_require__(/*! ./terrainModel.js */ \"./src/models/terrainModel.js\");\r\n    \r\nclass monsterModel {\r\n\r\n    constructor() {\r\n\r\n        if ( localStorage.getItem('monsterLocations') == null ) {\r\n            this.locations = {};\r\n            this.locations.jungle = [];\r\n            this.locations.sjahari = [];\r\n            this.locations.icepole = [];\r\n            this.locations.designer = [];\r\n            \r\n            localStorage.setItem('monsterLocations', JSON.stringify(this.locations));\r\n        }\r\n\r\n        this.locations = JSON.parse( localStorage.getItem('monsterLocations') );\r\n\r\n    }\r\n\r\n    generateMonsterID() {\r\n        return 'm' + ( this.locations.jungle.length + this.locations.sjahari.length + this.locations.icepole.length );\r\n    }\r\n\r\n    getMonsterInDesigner() {\r\n\r\n        if ( !this.locations.designer[0] ) {\r\n            return false;\r\n        }\r\n\r\n        return this.locations.designer[0];\r\n\r\n    }\r\n\r\n    saveLocations() {\r\n        localStorage.setItem('monsterLocations', JSON.stringify(this.locations));\r\n    }\r\n\r\n    addMonsterToLocation( id ) {\r\n        \r\n        this.locations.designer.push({\r\n            'id': id,\r\n            'x': 'designer',\r\n            'y': 'designer'\r\n        });\r\n\r\n        this.saveLocations();\r\n\r\n    }\r\n    \r\n    moveMonsterToLocation( climate, id, x, y ) {\r\n        \r\n        let climateLocations = this.locations[climate];\r\n        let designerLocations = this.locations.designer;\r\n        let visableMonsters = climateLocations.concat( designerLocations );\r\n\r\n        let monster = visableMonsters.find(function(element){\r\n            return element.id == id;\r\n        });\r\n\r\n        let index = this.locations[climate].indexOf(monster);\r\n        if ( index >= 0 ) {\r\n\r\n            this.locations[climate].splice(index, 1);\r\n\r\n        } else {\r\n\r\n            this.locations.designer = [];\r\n\r\n        }\r\n\r\n        if ( !(x == 'designer' && y == 'designer') ) {\r\n            \r\n            this.locations[climate].push({\r\n                'id': monster.id,\r\n                'x': x,\r\n                'y': y\r\n            });\r\n\r\n        } else {\r\n\r\n            this.locations.designer.push({\r\n                'id': monster.id,\r\n                'x': x,\r\n                'y': y\r\n            });\r\n\r\n        }\r\n\r\n\r\n        this.saveLocations();\r\n\r\n    }\r\n\r\n    getMonsterLocations( climate ) {\r\n\r\n        let climateLocations = this.locations[climate.name.toLowerCase()];\r\n        let designerLocations = this.locations.designer;\r\n\r\n        return climateLocations.concat( designerLocations );\r\n\r\n    }\r\n\r\n    saveMonsterProperties( id, properties ) {\r\n        \r\n        localStorage.setItem(id, JSON.stringify( properties ));\r\n\r\n    }\r\n\r\n    getMonsterProperties( id ) {\r\n\r\n        return JSON.parse( localStorage.getItem( id ) );\r\n\r\n    }\r\n\r\n    removeMonsterInDesigner( id ) {\r\n\r\n        localStorage.removeItem(id);\r\n        \r\n        this.locations.designer = [];\r\n        this.saveLocations();\r\n\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = new monsterModel();\n\n//# sourceURL=webpack:///./src/models/monsterModel.js?");

/***/ }),

/***/ "./src/models/terrainModel.js":
/*!************************************!*\
  !*** ./src/models/terrainModel.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let climateData = __webpack_require__(/*! ../climate.json */ \"./src/climate.json\");\r\n\r\nclass terrainModel {\r\n\r\n    constructor() {\r\n\r\n        if ( localStorage.getItem('currentClimate') == null ) {\r\n            localStorage.setItem('currentClimate', 'jungle');\r\n        }\r\n\r\n        this.weather = '...';\r\n\r\n    }\r\n\r\n    getCurrentClimate() {\r\n        return localStorage.getItem('currentClimate');\r\n    }\r\n\r\n    setCurrentClimate( name ) {\r\n        localStorage.setItem('currentClimate', name);\r\n    }\r\n\r\n    getClimateByName( name ) {\r\n        return climateData.climates.find(o => o.name.toLowerCase() === name);\r\n    }\r\n\r\n    getWeatherFromClimate( controller, climate, __callback ) {\r\n        /*\r\n            Thunderstorm\r\n            Drizzle\r\n            Rain\r\n            Snow\r\n            Mist\r\n            Smoke\r\n            Haze\r\n            Dust\r\n            Fog\r\n            Sand\r\n            Dust\r\n            Ash\r\n            Squall\r\n            Tornado\r\n            Clear\r\n            Clouds\r\n        */\r\n\r\n        let city = climate['reference city'];\r\n\r\n        let apiKey = '2adeeb754ec26a7e97c574b2c5d0d959';\r\n        let apiUrl = 'https://api.openweathermap.org/data/2.5/forecast?appid='+apiKey+'&q='+city;\r\n\r\n        fetch(apiUrl)\r\n            .then(\r\n                function(response) {\r\n                    if (response.status !== 200) {\r\n                        __callback( controller, null );\r\n                    }\r\n\r\n                    // Examine the text in the response\r\n                    response.json().then(function(data) {\r\n\r\n                        try {\r\n                            __callback( controller, data.list[0].weather[0].main );\r\n                        } catch ( e ) {\r\n                            __callback( controller, null );\r\n                        }\r\n\r\n                    });\r\n                }\r\n            )\r\n            .catch(function(err) {\r\n                __callback( controller, null );\r\n            });\r\n\r\n    }\r\n\r\n    setWeather( weather ) {\r\n        this.weather = weather;\r\n    }\r\n\r\n    getWeather() {\r\n        return this.weather;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = new terrainModel();\n\n//# sourceURL=webpack:///./src/models/terrainModel.js?");

/***/ }),

/***/ "./src/views/configuratorView.js":
/*!***************************************!*\
  !*** ./src/views/configuratorView.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class configuratorView {\r\n    \r\n    constructor() {\r\n\r\n        this.randomNames = [ 'aamon', 'abaddon', 'abezethibou', 'abraxas', 'abyzou', 'adramelech', 'aeshma', 'agaliarept', 'agares', 'agiel', 'agrat', 'ahriman', 'aim', 'akoman', 'akvan', 'ala', 'alal', 'alastor', 'allocer', 'alloces', 'allu', 'alu', 'amaymon', 'amdusias', 'amon', 'amy', 'anamalech', 'ancitif', 'andhaka', 'andras', 'andrealphus', 'andromalius', 'anzu', 'apollyon', 'archon', 'armaros', 'arunasura', 'asag', 'asakku', 'asbel', 'asmodai', 'asmodeus', 'astaroth', 'asura', 'azazel', 'baal', 'babi', 'bael', 'bakasura', 'balam', 'balberith', 'banshee', 'baphomet', 'barbas', 'barbatos', 'barong', 'bathin', 'bathym', 'beelzebub', 'behemoth', 'beherit', 'beleth', 'belial', 'belphegor', 'berith', 'bhoot', 'bhuta', 'bifrons', 'boruta', 'botis', 'buer', 'bukavac', 'bune', 'bushyasta', 'caacrinolaas', 'caassimolar', 'caim', 'camio', 'canio', 'cerbere', 'charun', 'chax', 'chemosh', 'choronzon', 'cimeies', 'cimejes', 'classyalabolas', 'corson', 'crocell', 'crocell', 'culsu', 'daeva', 'dagon', 'dahak', 'dahaka', 'dajjal', 'dajjal', 'danjal', 'dantalion', 'decarabia', 'demiurge', 'demogorgon', 'devil', 'drekavac', 'dzoavits', 'eblis', 'eisheth', 'eligos', 'flauros', 'flavros', 'focalor', 'foraii', 'foras', 'forcas', 'forneus', 'forras', 'furcas', 'furfur', 'gaap', 'gaderel', 'gaki', 'gamigin', 'ghoul', 'glassialabolis', 'gomory', 'gorgon', 'gremory', 'grigori', 'gualichu', 'guayota', 'gusion', 'gusoin', 'gusoyn', 'haagenti', 'haborym', 'halphas', 'hauras', 'haures', 'havres', 'ifrit', 'incubus', 'ipes', 'ipos', 'jikininki', 'jinn', 'kabandha', 'kabhanda', 'kali', 'kasadya', 'kimaris', 'kokabiel', 'krampus', 'kroni', 'kumbhakarna', 'lechies', 'legion', 'lempo', 'leraie', 'leraje', 'leviathan', 'leyak', 'lili', 'lilim', 'lilin', 'lilin', 'lilith', 'lucifer', 'malaphar', 'malephar', 'malphas', 'malthus', 'mammon', 'mara', 'marax', 'marchosias', 'maricha', 'marthim', 'mastema', 'mathim', 'mephistopheles', 'merihem', 'moloch', 'morax', 'morpheus', 'murmur', 'naamah', 'naberius', 'naberus', 'namtar', 'nero', 'ninurta', 'onoskelis', 'orcus', 'ordog', 'orias', 'oriax', 'orobas', 'ose', 'paimon', 'pazuzu', 'pelesit', 'penemue', 'phenex', 'pithius', 'pocong', 'pontianak', 'preta', 'procell', 'pruflas', 'puloman', 'rahab', 'rakshasa', 'rangda', 'raum', 'ravana', 'ronove', 'rusalka', 'sabnock', 'saleos', 'samael', 'satan', 'seir', 'semyaz', 'shax', 'shedim', 'sitri', 'solas', 'sthenno', 'stolas', 'suanggi', 'succubus', 'surgat', 'tannin', 'toyol', 'tuchulcha', 'ukobach', 'valac', 'valefar', 'vanth', 'vapula', 'vassago', 'vepar', 'vine', 'wendigo', 'xaphan', 'xezbeth', 'yeqon', 'yeterel', 'zagan', 'zahhak', 'zepar', 'ziminiar', 'zu' ];\r\n\r\n        this.inputFields = {\r\n            \"monsterID\":        document.querySelector('input#monsterID'),\r\n            \"typeOfMonster\":    document.querySelector('div#typeOfMonster select'),\r\n            \"monsterName\":      document.querySelector('div#monsterName input'),\r\n            \"numberOfArms\":     document.querySelector('div#numberOfArms select'),\r\n            \"typeOfArm\":        document.querySelector('div#typeOfArm select'),\r\n            \"numberOfLegs\":     document.querySelector('div#numberOfLegs select'),\r\n            \"numberOfEyes\":     document.querySelector('div#numberOfEyes select'),\r\n            \"typeOfFur\":        document.querySelector('div#typeOfFur select'),\r\n            \"monsterColor\":     document.querySelector('div#monsterColor select'),\r\n            \"monsterCanFly\":    document.querySelector('div#monsterCanFly input'),\r\n            \"monsterCanSwim\":   document.querySelector('div#monsterCanSwim input'),\r\n            \"monsterPowerLvl\":  document.querySelector('input#monsterPowerLvl')\r\n        };\r\n    }\r\n\r\n    getValuesAsObject() {\r\n\r\n        let obj = {\r\n            \"monsterID\":        this.inputFields['monsterID'].value,\r\n            \"monsterName\":      this.inputFields['monsterName'].value,\r\n            \"typeOfMonster\":    this.inputFields['typeOfMonster'].value,\r\n            \"numberOfArms\":     parseInt(this.inputFields['numberOfArms'].value),\r\n            \"typeOfArm\":        this.inputFields['typeOfArm'].value,\r\n            \"numberOfLegs\":     parseInt(this.inputFields['numberOfLegs'].value),\r\n            \"numberOfEyes\":     parseInt(this.inputFields['numberOfEyes'].value),\r\n            \"typeOfFur\":        this.inputFields['typeOfFur'].value,\r\n            \"monsterColor\":     this.inputFields['monsterColor'].value,\r\n            \"monsterCanFly\":    this.inputFields['monsterCanFly'].checked,\r\n            \"monsterCanSwim\":   this.inputFields['monsterCanSwim'].checked,\r\n            \"monsterPowerLvl\":  this.inputFields['monsterPowerLvl'].value,\r\n            \"monsterDrawing\":   (document.querySelector('#hdesign div.monster canvas') ? document.querySelector('#hdesign div.monster canvas').toDataURL() : '')\r\n        };\r\n\r\n        return obj;\r\n\r\n    }\r\n\r\n    updateConfigurator( monsterInDesigner, controller ) {\r\n\r\n        if ( monsterInDesigner === false ) {\r\n\r\n            document.querySelector('button#createMonster').style.display = \"block\";\r\n            document.querySelector('div.creation').style.display = \"none\";\r\n\r\n        } else {\r\n\r\n            document.querySelector('button#createMonster').style.display = \"none\";\r\n            document.querySelector('div.creation').style.display = \"block\";\r\n\r\n            this.loadMonsterData( monsterInDesigner, controller, true );\r\n\r\n            document.querySelector('#hdesign div.monster canvas').height = 170;\r\n            document.querySelector('#hdesign div.monster canvas').width = 170;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    loadMonsterData( monster, controller, validate ) {\r\n\r\n        let properties = controller.retrieveMonsterProperties( monster.id );\r\n        \r\n        this.inputFields['monsterID'].value = properties.monsterID;\r\n        this.inputFields['monsterPowerLvl'].value = properties.monsterPowerLvl;\r\n        this.inputFields['monsterName'].value = properties.monsterName;\r\n        this.inputFields['typeOfMonster'].value = properties.typeOfMonster;\r\n\r\n\r\n        var option = document.createElement(\"option\");\r\n        option.text = ''+ properties.numberOfArms;\r\n        option.selected = 'selected';\r\n        this.inputFields['numberOfArms'].add( option );\r\n\r\n        var option = document.createElement(\"option\");\r\n        option.text = ''+ properties.typeOfArm;\r\n        option.selected = 'selected';\r\n        this.inputFields['typeOfArm'].add( option );\r\n\r\n        var option = document.createElement(\"option\");\r\n        option.text = ''+ properties.numberOfLegs;\r\n        option.selected = 'selected';\r\n        this.inputFields['numberOfLegs'].add( option );\r\n\r\n        var option = document.createElement(\"option\");\r\n        option.text = ''+ properties.numberOfEyes;\r\n        option.selected = 'selected';\r\n        this.inputFields['numberOfEyes'].add( option );\r\n\r\n        var option = document.createElement(\"option\");\r\n        option.text = ''+ properties.typeOfFur;\r\n        option.selected = 'selected';\r\n        this.inputFields['typeOfFur'].add( option );\r\n\r\n        var option = document.createElement(\"option\");\r\n        option.text = ''+ properties.monsterColor;\r\n        option.selected = 'selected';\r\n        this.inputFields['monsterColor'].add( option );\r\n\r\n\r\n        this.inputFields['monsterCanFly'].checked = properties.monsterCanFly;\r\n        this.inputFields['monsterCanSwim'].checked = properties.monsterCanSwim;\r\n\r\n        document.querySelector('input#drawMonsterCheckbox').checked = false;\r\n\r\n        if ( validate ) {\r\n            this.validateConfiguratorFields( controller );\r\n        }\r\n\r\n\r\n    }\r\n\r\n    generateNewMonster( id, controller ) {\r\n        \r\n        let randomNumber = Math.floor(Math.random() * 4);\r\n        let monsterPowerLvl = Math.floor(Math.random() * 10) + 1;\r\n\r\n        this.inputFields['monsterID'].value = id;\r\n        this.inputFields['monsterPowerLvl'].value = monsterPowerLvl*10;\r\n        this.inputFields['monsterName'].value = '';\r\n        this.inputFields['typeOfMonster'].value = this.inputFields['typeOfMonster'].options[ randomNumber ].value;\r\n        this.inputFields['numberOfArms'].value = false;\r\n        this.inputFields['typeOfArm'].value = false;\r\n        this.inputFields['numberOfLegs'].value = false;\r\n        this.inputFields['numberOfEyes'].value = false;\r\n        this.inputFields['typeOfFur'].value = false;\r\n        this.inputFields['monsterColor'].value = false;\r\n        this.inputFields['monsterCanFly'].checked = false;\r\n        this.inputFields['monsterCanSwim'].checked = false;\r\n\r\n        this.validateConfiguratorFields( controller );\r\n\r\n    }\r\n\r\n\r\n    unfocusFields() {\r\n\r\n        for ( var key in this.inputFields ) {\r\n            if (!this.inputFields.hasOwnProperty(key)) continue;\r\n            \r\n            this.inputFields[key].blur();\r\n        }\r\n\r\n    }\r\n\r\n    addDrawableEventListener( __callback ) {\r\n\r\n        document.querySelector('input#drawMonsterCheckbox').addEventListener(\"click\", function(event) {\r\n            __callback( event, document.querySelector('input#drawMonsterCheckbox').checked );\r\n        });\r\n\r\n    }\r\n\r\n\r\n    setConfiguratorEventListeners( controller ) {\r\n\r\n        let thisView = this;\r\n        document.querySelector('div#typeOfMonster select'   ).addEventListener(\"change\",  function(event) { thisView.validateConfiguratorFields( controller ); });\r\n        document.querySelector('div#monsterName input'      ).addEventListener(\"change\",  function(event) { thisView.validateConfiguratorFields( controller ); });\r\n        document.querySelector('div#numberOfArms select'    ).addEventListener(\"change\",  function(event) { thisView.validateConfiguratorFields( controller ); });\r\n        document.querySelector('div#typeOfArm select'       ).addEventListener(\"change\",  function(event) { thisView.validateConfiguratorFields( controller ); });\r\n        document.querySelector('div#numberOfLegs select'    ).addEventListener(\"change\",  function(event) { thisView.validateConfiguratorFields( controller ); });\r\n        document.querySelector('div#numberOfEyes select'    ).addEventListener(\"change\",  function(event) { thisView.validateConfiguratorFields( controller ); });\r\n        document.querySelector('div#typeOfFur select'       ).addEventListener(\"change\",  function(event) { thisView.validateConfiguratorFields( controller ); });\r\n        document.querySelector('div#monsterColor select'    ).addEventListener(\"change\",  function(event) { thisView.validateConfiguratorFields( controller ); });\r\n        document.querySelector('div#monsterCanFly input'    ).addEventListener(\"change\",  function(event) { thisView.validateConfiguratorFields( controller ); });\r\n        document.querySelector('div#monsterCanSwim input'   ).addEventListener(\"change\",  function(event) { thisView.validateConfiguratorFields( controller ); });\r\n\r\n    }\r\n\r\n    validateConfiguratorFields( controller ) {\r\n        \r\n        this.validateMonsterName( this.inputFields );\r\n        this.validateNumberOfArms( this.inputFields );\r\n        this.validateTypeOfArm( this.inputFields );\r\n        this.validateNumberOfLegs( this.inputFields );\r\n        this.validateNumberOfEyes( this.inputFields );\r\n        this.validateTypeOfFur( this.inputFields );\r\n        this.validateMonsterColor( this.inputFields );\r\n        this.validateMonsterCanFly( this.inputFields );\r\n        this.validateMonsterCanSwim( this.inputFields );\r\n        \r\n        controller.updateMonsterProperties( this.inputFields['monsterID'].value, this.getValuesAsObject() );\r\n\r\n    }\r\n\r\n    validateNumberOfArms( inputFields ) {\r\n        \r\n        let numberOfArms = inputFields['numberOfArms'];\r\n        let possibleValues = [];\r\n        let previousValue = (numberOfArms.options[ numberOfArms.selectedIndex ] ? numberOfArms.options[ numberOfArms.selectedIndex ].value : null );\r\n\r\n        let typeOfMonster = inputFields['typeOfMonster'];\r\n        if ( 'water' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ];\r\n        } else if ( 'fire' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 0, 1, 2, 3, 4, 5, 6 ];\r\n        } else if ( 'earth' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 2 ];\r\n        } else if ( 'wind' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 2 ];\r\n        }\r\n\r\n        for ( let i = numberOfArms.options.length - 1 ; i >= 0 ; i-- ) {\r\n\r\n            numberOfArms.remove( i );\r\n\r\n        }\r\n\r\n        for ( let i = 0; i < possibleValues.length; i++ ) {\r\n            \r\n            var option = document.createElement(\"option\");\r\n            option.text = ''+ possibleValues[i];\r\n\r\n            if ( previousValue != null && previousValue == option.text ) {\r\n                option.selected = 'selected';\r\n            }\r\n            \r\n            numberOfArms.add( option );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    validateTypeOfArm( inputFields ) {\r\n\r\n        let typeOfArm = inputFields['typeOfArm'];\r\n        let possibleValues = [];\r\n        let previousValue = (typeOfArm.options[ typeOfArm.selectedIndex ] ? typeOfArm.options[ typeOfArm.selectedIndex ].value : null );\r\n\r\n        let typeOfMonster = inputFields['typeOfMonster'];\r\n        if ( 'water' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Tentacles', 'Fins' ];\r\n        } else if ( 'fire' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Tentacles','Claws', 'Claw-Wings' ];\r\n        } else if ( 'earth' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Claws' ];\r\n        } else if ( 'wind' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Wings', 'Claw-Wings' ];\r\n        }\r\n\r\n        for ( let i = typeOfArm.options.length - 1 ; i >= 0 ; i-- ) {\r\n            typeOfArm.remove( i );\r\n        }\r\n\r\n        for ( let i = 0; i < possibleValues.length; i++ ) {\r\n            \r\n            var option = document.createElement(\"option\");\r\n            option.text = ''+ possibleValues[i];\r\n\r\n            if ( previousValue != null && previousValue == option.text ) {\r\n                option.selected = 'selected';\r\n            }\r\n            \r\n            typeOfArm.add( option );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    validateNumberOfLegs( inputFields ) {\r\n\r\n        let numberOfLegs = inputFields['numberOfLegs'];\r\n        let possibleValues = [];\r\n        let previousValue = (numberOfLegs.options[ numberOfLegs.selectedIndex ] ? numberOfLegs.options[ numberOfLegs.selectedIndex ].value : null );\r\n\r\n        let typeOfMonster = inputFields['typeOfMonster'];\r\n        let numberOfArms = inputFields['numberOfArms'];\r\n        if ( \r\n            'water' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() && \r\n            numberOfArms.options[ numberOfArms.selectedIndex ].value <= 4\r\n        ) {\r\n            possibleValues = [ 0, 1, 2, 3, 4 ];\r\n        } else if ( \r\n            'water' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() && \r\n            numberOfArms.options[ numberOfArms.selectedIndex ].value > 4\r\n        ) {\r\n            possibleValues = [ 'Only arms' ];\r\n        } else if ( \r\n            'fire' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() && \r\n            numberOfArms.options[ numberOfArms.selectedIndex ].value <= 2\r\n        ) {\r\n            possibleValues = [ 2 ];\r\n        }  else if ( \r\n            'fire' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() && \r\n            numberOfArms.options[ numberOfArms.selectedIndex ].value > 2\r\n        ) {\r\n            possibleValues = [ 'Only arms' ];\r\n        } else if ( 'earth' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 2, 4, 6 ];\r\n        } else if ( 'wind' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 0, 2 ];\r\n        }\r\n\r\n        for ( let i = numberOfLegs.options.length - 1 ; i >= 0 ; i-- ) {\r\n            numberOfLegs.remove( i );\r\n        }\r\n\r\n        for ( let i = 0; i < possibleValues.length; i++ ) {\r\n            \r\n            var option = document.createElement(\"option\");\r\n            option.text = ''+ possibleValues[i];\r\n\r\n            if ( previousValue != null && previousValue == option.text ) {\r\n                option.selected = 'selected';\r\n            }\r\n            \r\n            numberOfLegs.add( option );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    validateNumberOfEyes( inputFields ) {\r\n        \r\n        let numberOfEyes = inputFields['numberOfEyes'];\r\n        let possibleValues = [];\r\n        let previousValue = (numberOfEyes.options[ numberOfEyes.selectedIndex ] ? numberOfEyes.options[ numberOfEyes.selectedIndex ].value : null );\r\n\r\n        let typeOfMonster = inputFields['typeOfMonster'];\r\n        if ( 'water' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ];\r\n        } else if ( 'fire' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 0, 1, 2, 3, 4 ];\r\n        } else if ( 'earth' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 2 ];\r\n        } else if ( 'wind' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 2 ];\r\n        }\r\n\r\n        for ( let i = numberOfEyes.options.length - 1 ; i >= 0 ; i-- ) {\r\n\r\n            numberOfEyes.remove( i );\r\n\r\n        }\r\n\r\n        for ( let i = 0; i < possibleValues.length; i++ ) {\r\n            \r\n            var option = document.createElement(\"option\");\r\n            option.text = ''+ possibleValues[i];\r\n\r\n            if ( previousValue != null && previousValue == option.text ) {\r\n                option.selected = 'selected';\r\n            }\r\n            \r\n            numberOfEyes.add( option );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    validateTypeOfFur( inputFields ) {\r\n        \r\n        let typeOfFur = inputFields['typeOfFur'];\r\n        let possibleValues = [];\r\n        let previousValue = (typeOfFur.options[ typeOfFur.selectedIndex ] ? typeOfFur.options[ typeOfFur.selectedIndex ].value : null );\r\n\r\n        let typeOfMonster = inputFields['typeOfMonster'];\r\n        if ( 'water' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Scales', 'Slime' ];\r\n        } else if ( 'fire' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Scales', 'Feathers' ];\r\n        } else if ( 'earth' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Hair', 'Scales', 'Slime' ];\r\n        } else if ( 'wind' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Feathers', 'Hair', 'Scales' ];\r\n        }\r\n\r\n        for ( let i = typeOfFur.options.length - 1 ; i >= 0 ; i-- ) {\r\n\r\n            typeOfFur.remove( i );\r\n\r\n        }\r\n\r\n        for ( let i = 0; i < possibleValues.length; i++ ) {\r\n            \r\n            var option = document.createElement(\"option\");\r\n            option.text = ''+ possibleValues[i];\r\n\r\n            if ( previousValue != null && previousValue == option.text ) {\r\n                option.selected = 'selected';\r\n            }\r\n            \r\n            typeOfFur.add( option );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    validateMonsterColor( inputFields ) {\r\n        \r\n        let monsterColor = inputFields['monsterColor'];\r\n        let possibleValues = [];\r\n        let previousValue = (monsterColor.options[ monsterColor.selectedIndex ] ? monsterColor.options[ monsterColor.selectedIndex ].value : null );\r\n\r\n        let typeOfMonster = inputFields['typeOfMonster'];\r\n        if ( 'water' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Blue', 'Red', 'Green' ];\r\n        } else if ( 'fire' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Red', 'Orange', 'Brown' ];\r\n        } else if ( 'earth' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Purple', 'Orange', 'White' ];\r\n        } else if ( 'wind' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'White', 'Blue', 'Purple' ];\r\n        }\r\n\r\n        for ( let i = monsterColor.options.length - 1 ; i >= 0 ; i-- ) {\r\n\r\n            monsterColor.remove( i );\r\n\r\n        }\r\n\r\n        for ( let i = 0; i < possibleValues.length; i++ ) {\r\n            \r\n            var option = document.createElement(\"option\");\r\n            option.text = ''+ possibleValues[i];\r\n\r\n            if ( previousValue != null && previousValue == option.text ) {\r\n                option.selected = 'selected';\r\n            }\r\n            \r\n            monsterColor.add( option );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    validateMonsterCanFly( inputFields ) {\r\n        \r\n        let monsterCanFly = inputFields['monsterCanFly'];\r\n\r\n        let typeOfMonster = inputFields['typeOfMonster'];\r\n        let typeOfFur = inputFields['typeOfFur'];\r\n        if ( 'water' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            monsterCanFly.checked = false;\r\n        } else if ( \r\n            'fire' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() &&\r\n            typeOfFur.options[ typeOfFur.selectedIndex ].value.toLowerCase() == 'feathers'\r\n        ) {\r\n            monsterCanFly.checked = true;\r\n        } else if ( 'fire' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            monsterCanFly.checked = false;\r\n        } else if ( 'earth' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            monsterCanFly.checked = false;\r\n        } else if ( 'wind' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            monsterCanFly.checked = true;\r\n        }\r\n\r\n    }\r\n\r\n    validateMonsterCanSwim( inputFields ) {\r\n        \r\n        let monsterCanSwim = inputFields['monsterCanSwim'];\r\n\r\n        let typeOfMonster = inputFields['typeOfMonster'];\r\n        let typeOfFur = inputFields['typeOfFur'];\r\n        if ( 'water' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            monsterCanSwim.checked = true;\r\n        } else if ( 'fire' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            monsterCanSwim.checked = false;\r\n        } else if ( 'earth' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            monsterCanSwim.checked = false;\r\n        } else if ( \r\n            'wind' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() &&\r\n            (\r\n                typeOfFur.options[ typeOfFur.selectedIndex ].value.toLowerCase() == 'hair' ||\r\n                typeOfFur.options[ typeOfFur.selectedIndex ].value.toLowerCase() == 'scales'\r\n            )\r\n        ) {\r\n            monsterCanSwim.checked = true;\r\n        } else if ( 'wind' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            monsterCanSwim.checked = false;\r\n        }\r\n\r\n    }\r\n\r\n    validateMonsterName( inputFields ) {\r\n\r\n        let monsterName = inputFields['monsterName'];\r\n        if ( monsterName.value == '' ) {\r\n\r\n            let randomNumber = Math.floor(Math.random() * this.randomNames.length);\r\n            monsterName.value = this.randomNames[randomNumber];\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = new configuratorView();\n\n//# sourceURL=webpack:///./src/views/configuratorView.js?");

/***/ }),

/***/ "./src/views/monsterView.js":
/*!**********************************!*\
  !*** ./src/views/monsterView.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let terrainView = __webpack_require__(/*! ./terrainView.js */ \"./src/views/terrainView.js\"),\r\n    configuratorView = __webpack_require__(/*! ./configuratorView.js */ \"./src/views/configuratorView.js\"),\r\n    barGraph = __webpack_require__(/*! ../libraries/barGraph.js */ \"./src/libraries/barGraph.js\");\r\n\r\nclass monsterView {\r\n\r\n    constructor() {\r\n\r\n        this.drawable = false;\r\n        this.drawing = false;\r\n        this.clickX = new Array();\r\n        this.clickY = new Array();\r\n        this.clickDrag = new Array();\r\n\r\n    }\r\n\r\n    getBaseMonster() {\r\n\r\n        let monster = document.createElement('div');\r\n        monster.setAttribute('class', 'monster');\r\n        monster.setAttribute('draggable', 'true');\r\n\r\n        let canvas = document.createElement('canvas');\r\n            if(typeof G_vmlCanvasManager != 'undefined') {\r\n                canvas = G_vmlCanvasManager.initElement(canvas);\r\n            }\r\n            canvas.setAttribute('draggable', 'false');\r\n            monster.appendChild( canvas );\r\n\r\n        return monster;\r\n\r\n    }\r\n\r\n    drawMonsters( locations, controller ) {\r\n\r\n        for ( let i = 0; i < locations.length; i++ ) {\r\n            let holder = terrainView.getHolderPosition( locations[i].x, locations[i].y );\r\n\r\n            if ( holder.childElementCount > 0 ) {\r\n                holder.removeChild(holder.firstChild);\r\n            }\r\n            \r\n            this.drawMonster( holder, controller, {\r\n                'id': locations[i].id\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    drawMonster( container, controller, properties ) {\r\n        \r\n        let monster = this.getBaseMonster();\r\n        let savedProperties = controller.retrieveMonsterProperties( properties.id );\r\n\r\n        monster.setAttribute('id', properties.id);\r\n        if ( savedProperties.monsterColor ) {\r\n            monster.style.backgroundColor = savedProperties.monsterColor;\r\n        }\r\n\r\n        container.appendChild( monster );\r\n\r\n        if ( savedProperties.monsterDrawing ) {\r\n            let context = monster.firstChild.getContext('2d'),\r\n                img = new Image();\r\n            img.onload = function() {\r\n                context.drawImage(this, 0, 0, monster.firstChild.width, monster.firstChild.height);\r\n            }\r\n            img.src = savedProperties.monsterDrawing;\r\n        }\r\n\r\n        monster.firstChild.height = 170;\r\n        monster.firstChild.width = 170;\r\n\r\n\r\n        this.addMonsterEventListener( monster, controller );\r\n\r\n    }\r\n\r\n    removeMonsterInDesigner() {\r\n\r\n        let designer = document.querySelector('#hdesign');\r\n        while (designer.firstChild) {\r\n            designer.removeChild(designer.firstChild);\r\n        }\r\n\r\n    }\r\n\r\n    setupDrawingBoard( controller ) {\r\n        let thisView = this;\r\n        configuratorView.addDrawableEventListener(function( event, value ) {\r\n\r\n            document.querySelector('#hdesign div.monster').setAttribute('draggable', ''+(!value));\r\n            if ( value ) {\r\n\r\n                document.querySelector('#hdesign div.monster').style.cursor = 'crosshair';\r\n\r\n                thisView.clickX = new Array();\r\n                thisView.clickY = new Array();\r\n                thisView.clickDrag = new Array();\r\n\r\n                let monster = document.querySelector('#hdesign div.monster');\r\n                let savedProperties = controller.retrieveMonsterProperties( monster.id );\r\n                if ( savedProperties.monsterDrawing ) {\r\n                    let context = monster.firstChild.getContext('2d'),\r\n                        img = new Image();\r\n                    img.onload = function() {\r\n                        context.drawImage(this, 0, 0, monster.firstChild.width, monster.firstChild.height);\r\n                    }\r\n                    img.src = savedProperties.monsterDrawing;\r\n                }\r\n\r\n            } else {\r\n\r\n                document.querySelector('#hdesign div.monster').style.cursor = 'grab';\r\n\r\n                let monsterID = document.querySelector('#hdesign div.monster').id;\r\n                let properties = controller.retrieveMonsterProperties( monsterID );\r\n                properties.monsterDrawing = document.querySelector('#hdesign div.monster canvas').toDataURL();\r\n                \r\n                controller.updateMonsterProperties( monsterID, properties );\r\n\r\n            }\r\n\r\n            thisView.drawable = value;\r\n\r\n        });\r\n    }\r\n\r\n    addMonsterEventListener( monster, controller ) {\r\n\r\n        let thisView = this;\r\n        monster.addEventListener('click', function(e) {\r\n            if ( !thisView.drawable ) {\r\n                thisView.monsterClick(e, controller);\r\n            }\r\n        });\r\n\r\n\r\n        monster.addEventListener('dragstart', function(e) {\r\n            thisView.monsterDragstart(e);\r\n        });\r\n\r\n        monster.addEventListener('dragend', function(e) {\r\n            thisView.monsterDragend(e, controller);\r\n        });\r\n\r\n\r\n        monster.addEventListener('mouseover', function(e) {\r\n            thisView.monsterMouseOver(e, controller);\r\n        });\r\n\r\n        monster.addEventListener('mouseout', function(e) {\r\n            thisView.monsterMouseOut();\r\n        });\r\n\r\n\r\n        monster.addEventListener('mousedown', function(e) {\r\n            thisView.monsterMouseDown(e);\r\n        });\r\n\r\n        monster.addEventListener('mousemove', function(e) {\r\n            thisView.monsterMouseMove(e);\r\n        });\r\n\r\n        monster.addEventListener('mouseup', function(e) {\r\n            thisView.drawing = false;\r\n        });\r\n\r\n        monster.addEventListener('mouseleave', function(e) {\r\n            thisView.drawing = false;\r\n        });\r\n\r\n    }\r\n\r\n\r\n    monsterMouseDown( e ) {\r\n\r\n        if ( !this.drawable ) { return; }\r\n        \r\n        let rect = e.target.getBoundingClientRect();\r\n\r\n        this.drawing = true;\r\n        this.drawMonsterAddClick(e.clientX - rect.left, e.clientY - rect.top);\r\n        this.drawMonsterRedraw();\r\n\r\n    }\r\n\r\n    monsterMouseMove( e ) {\r\n\r\n        let rect = e.target.getBoundingClientRect();;\r\n        \r\n        if ( this.drawing ) {\r\n            this.drawMonsterAddClick(e.clientX - rect.left, e.clientY - rect.top, true);\r\n            this.drawMonsterRedraw();\r\n        }\r\n\r\n    }\r\n\r\n    drawMonsterAddClick( x, y, dragging ) {\r\n        this.clickX.push(x);\r\n        this.clickY.push(y);\r\n        this.clickDrag.push(dragging);\r\n    }\r\n\r\n    drawMonsterRedraw() {\r\n\r\n        let context = document.querySelector('#hdesign div.monster canvas').getContext(\"2d\");\r\n\r\n        // context.clearRect(0, 0, context.canvas.width, context.canvas.height);\r\n        \r\n        context.strokeStyle = \"#E0E0E0\";\r\n        context.lineJoin = \"round\";\r\n        context.lineWidth = 5;\r\n\r\n        for ( let i=0; i < this.clickX.length; i++ ) {\r\n            context.beginPath();\r\n\r\n            if ( this.clickDrag[i] && i ) {\r\n                context.moveTo(this.clickX[i-1], this.clickY[i-1]);\r\n            } else {\r\n                context.moveTo(this.clickX[i]-1, this.clickY[i]);\r\n            }\r\n            \r\n            context.lineTo(this.clickX[i], this.clickY[i]);\r\n            context.closePath();\r\n            context.stroke();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    monsterDragstart( event ) {\r\n\r\n        this.hideMonsterStats();\r\n\r\n        \r\n        event.dataTransfer.setData(\"draggable\", event.target.id);\r\n\r\n        event.target.style.transform = 'translate(0, 0)';\r\n        event.dataTransfer.setDragImage(event.target, event.target.offsetWidth/2, event.target.offsetHeight/2);\r\n        \r\n    }\r\n\r\n    monsterDragend( event, controller ) {\r\n\r\n        this.showMonsterStats( event, controller );\r\n\r\n    }\r\n\r\n\r\n    monsterClick( event, controller ) {\r\n\r\n        let monster = controller.retrieveMonsterProperties( event.target.id );\r\n\r\n        if ( controller.getAugementedPowerLvl(monster) >= 70 ) {\r\n\r\n            event.target.style.boxShadow = '0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22)';\r\n            event.target.style.transform = 'scale(1.5, 1.5)';\r\n            event.target.parentElement.style.zIndex = 99;\r\n\r\n            this.executeSpecialMove( monster.typeOfMonster.toLowerCase() );\r\n\r\n            setTimeout(function() { \r\n                event.target.style.boxShadow = '0 0px 0px rgba(0,0,0,0), 0 0px 0px rgba(0,0,0,0)';\r\n                event.target.style.transform = 'scale(1, 1)';\r\n                event.target.parentElement.style.zIndex = 1;\r\n            }, 500);\r\n\r\n        } else {\r\n            \r\n            event.target.classList.add('monster-shake');\r\n\r\n            setTimeout(function() { \r\n                event.target.classList.remove('monster-shake');\r\n            }, 400);\r\n\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    monsterMouseOver( event, controller ) {\r\n\r\n        this.showMonsterStats( event, controller );\r\n\r\n    }\r\n\r\n    monsterMouseOut() {\r\n\r\n        this.hideMonsterStats();\r\n\r\n    }\r\n\r\n    showMonsterStats( event, controller ) {\r\n\r\n        this.hideMonsterStats();\r\n        configuratorView.unfocusFields();\r\n\r\n        if ( !event.path[1] || event.path[1].id == 'hdesign' ) { return; }\r\n\r\n        let monsterInfo = controller.retrieveMonsterProperties( event.target.id );\r\n\r\n        let monsterStats = document.createElement('div');\r\n            monsterStats.setAttribute('class', 'monster-stats bg-mat-100');\r\n            monsterStats.setAttribute('id', event.target.id);\r\n            document.querySelector('div.monster-configurator-row div.col-12').appendChild( monsterStats );\r\n            \r\n        let monsterName = document.createElement('h1');\r\n            monsterName.innerHTML = monsterInfo.monsterName;\r\n            monsterName.style.color = monsterInfo.monsterColor;\r\n            monsterStats.appendChild( monsterName );\r\n\r\n        let monsterType = document.createElement('small');\r\n            monsterType.setAttribute('class', 'text-muted');\r\n            monsterType.style.fontSize = '60%';\r\n            monsterType.innerHTML = ' '+monsterInfo.typeOfMonster;\r\n            monsterName.appendChild( monsterType );\r\n\r\n\r\n        let monsterGraph = document.createElement('canvas');\r\n            monsterStats.appendChild( monsterGraph );\r\n\r\n            var graph = new barGraph( monsterGraph.getContext(\"2d\") );\r\n            graph.margin = 10;\r\n            graph.width = (monsterStats.offsetWidth - 30) / 2;\r\n            graph.height = 150;\r\n            graph.backgroundColor = window.getComputedStyle(monsterStats, null).getPropertyValue('background-color'); ;\r\n            graph.xAxisLabelArr = [\"Arms\", \"Legs\", \"Eyes\"];\r\n            graph.update([8, 8, 8]);\r\n            graph.update([\r\n                (Number.isInteger(monsterInfo.numberOfArms) ? monsterInfo.numberOfArms+0.001 : 0),\r\n                (Number.isInteger(monsterInfo.numberOfLegs) ? monsterInfo.numberOfLegs+0.001 : 0),\r\n                (Number.isInteger(monsterInfo.numberOfEyes) ? monsterInfo.numberOfEyes+0.001 : 0)\r\n            ]);\r\n\r\n        let monstertypeOf = document.createElement('h5');\r\n            monstertypeOf.setAttribute('class', 'mt-4');\r\n            monstertypeOf.innerHTML = 'Has '+monsterInfo.typeOfArm.toLowerCase()+' and '+monsterInfo.typeOfFur.toLowerCase()+'.';\r\n            monsterStats.appendChild( monstertypeOf );\r\n\r\n\r\n        let monsterCanFly = document.createElement('h5');\r\n            monsterCanFly.setAttribute('class', 'mt-4');\r\n            monsterCanFly.innerHTML = (monsterInfo.monsterCanFly ? '✔' : '❌')+' Can'+(monsterInfo.monsterCanFly ? '' : '\\'t')+' fly.';\r\n            monsterStats.appendChild( monsterCanFly );\r\n\r\n        let monsterCanSwim = document.createElement('h5');\r\n            monsterCanSwim.setAttribute('class', 'mt-1');\r\n            monsterCanSwim.innerHTML = (monsterInfo.monsterCanSwim ? '✔' : '❌')+' Can'+(monsterInfo.monsterCanSwim ? '' : '\\'t')+' swim.';\r\n            monsterStats.appendChild( monsterCanSwim );\r\n\r\n        let monsterPower = document.createElement('h5');\r\n            monsterPower.setAttribute('class', 'mt-4 mb-0');\r\n            monsterPower.innerHTML = 'Power level';\r\n            monsterStats.appendChild( monsterPower );\r\n\r\n        let monsterPowerBar = document.createElement('div');\r\n            monsterPowerBar.setAttribute('class', 'monster-power-bar mt-1 p'+controller.getAugementedPowerLvl(monsterInfo)/10);\r\n            monsterPowerBar.innerHTML = controller.getAugementedPowerLvl(monsterInfo)+' / 100';\r\n            monsterStats.appendChild( monsterPowerBar );\r\n\r\n    }\r\n\r\n    hideMonsterStats() {\r\n\r\n        let existingMonsterStats = document.querySelector('div.monster-stats');\r\n        if ( existingMonsterStats ) { existingMonsterStats.remove(); }\r\n\r\n    }\r\n\r\n    executeSpecialMove( type ) {\r\n\r\n        let audio = new Audio('../../../assets/ahh.mp3');\r\n        audio.play();\r\n        setTimeout(function() {\r\n            audio.remove()\r\n        }, 2000);\r\n\r\n        if ( type == 'water' ) {\r\n\r\n            let nbDrop = 400; \r\n\r\n            for ( let i = 1; i < nbDrop ;i++ ) {\r\n                let dropLeft = Math.floor(Math.random() * 2000);\r\n                let dropTop = Math.floor(Math.random() * 1400) - 1000;\r\n\r\n                let drop = document.createElement('div');\r\n                drop.setAttribute('class', 'drop');\r\n                drop.setAttribute('id', 'drop'+i);\r\n                document.querySelector('body').appendChild(drop);\r\n                document.querySelector('body').style.overflow = 'hidden';\r\n\r\n                document.querySelector('#drop'+i).style.left = dropLeft+'px';\r\n                document.querySelector('#drop'+i).style.top = dropTop+'px';\r\n            }\r\n\r\n            setTimeout(function() { \r\n                for ( let i = 1; i < nbDrop ;i++ ) {\r\n                    document.querySelector('#drop'+i).remove();\r\n                }\r\n            }, 500);\r\n\r\n\r\n        } else if ( type == 'fire' ) {\r\n\r\n            \r\n            let fire = document.createElement('div');\r\n            fire.setAttribute('class', 'fireMove');\r\n            document.querySelector('body').appendChild(fire);\r\n            \r\n            fire.classList.add('active');\r\n            document.querySelector('div.container-fluid.outer div.row').classList.add('monster-shake');\r\n\r\n            setTimeout(function() { \r\n                document.querySelector('div.fireMove').remove();\r\n\r\n                document.querySelector('div.container-fluid.outer div.row').classList.remove('monster-shake');\r\n            }, 500);\r\n\r\n        } else if ( type == 'earth' ) {\r\n            \r\n            let oddHolders = document.querySelectorAll('div#tiles div.holder:nth-child(odd)');\r\n            let evenHolders = document.querySelectorAll('div#tiles div.holder:nth-child(even)');\r\n\r\n            for ( let i = 0; i < oddHolders.length; i++ ) {\r\n                oddHolders[i].classList.add('monster-shake');\r\n            }\r\n\r\n            setTimeout(function() {\r\n                for ( let i = 0; i < oddHolders.length; i++ ) {\r\n                    evenHolders[i].classList.add('monster-shake');\r\n                }\r\n            }, 100);\r\n\r\n            setTimeout(function() {\r\n                \r\n                for ( let i = 0; i < oddHolders.length; i++ ) {\r\n                    oddHolders[i].classList.remove('monster-shake');\r\n                }\r\n\r\n                for ( let i = 0; i < oddHolders.length; i++ ) {\r\n                    evenHolders[i].classList.remove('monster-shake');\r\n                }\r\n\r\n            }, 600);\r\n            \r\n        } else if ( type == 'wind' ) {\r\n            \r\n            document.querySelector('div.col-8 div.full-height-box').classList.add('windMove');\r\n\r\n            setTimeout(function() { \r\n                document.querySelector('div.col-8 div.full-height-box').classList.remove('windMove');\r\n            }, 500);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    reactToMove( x, y ) {\r\n\r\n        if ( x == 'designer' && y == 'designer' ) { return; }\r\n\r\n        let monsters = document.querySelectorAll('div#tiles div.holder:not(#h'+x+'-'+y+') div.monster'),\r\n            me = document.querySelector('div#tiles div.holder#h'+x+'-'+y+' div.monster');\r\n\r\n        for ( let i = 0; i < monsters.length; i++ ) {\r\n\r\n            let thisX = me.offsetLeft + 50,\r\n                thisY = me.offsetTop + 30;\r\n\r\n            let thatX = monsters[i].offsetLeft + 50,\r\n                thatY = monsters[i].offsetTop + 30;\r\n\r\n            let dy = thatY - thisY,\r\n                dx = thatX - thisX,\r\n                theta = Math.atan2(dy, dx);\r\n            theta *= 180/Math.PI;\r\n            theta += 90;\r\n            \r\n            \r\n            if ( theta >= 180 ) {\r\n                theta = -Math.abs( 360 - theta );\r\n            }\r\n\r\n            \r\n\r\n            setTimeout(function() {\r\n                monsters[i].style.transform = 'rotate('+theta+'deg)';\r\n\r\n                let audio = new Audio('../../../assets/huh.mp3');\r\n                audio.play();\r\n                setTimeout(function() {\r\n                    audio.remove()\r\n                }, 2000);\r\n\r\n                if ( i >= monsters.length-1 ) {\r\n                    setTimeout(function() { \r\n                        for ( let i = 0; i < monsters.length; i++ ) {\r\n                            monsters[i].style.transform = 'rotate('+0+'deg)';\r\n                        }\r\n                    }, 500);\r\n                }\r\n\r\n            }, 300 + i * 200);\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = new monsterView();\n\n//# sourceURL=webpack:///./src/views/monsterView.js?");

/***/ }),

/***/ "./src/views/terrainView.js":
/*!**********************************!*\
  !*** ./src/views/terrainView.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class terrainView {\r\n\r\n    emptyField() {\r\n        \r\n        let tiles = document.querySelector('#tiles');\r\n        while (tiles.firstChild) {\r\n            tiles.removeChild(tiles.firstChild);\r\n        }\r\n\r\n        let designer = document.querySelector('#hdesign');\r\n        while (designer.firstChild) {\r\n            designer.removeChild(designer.firstChild);\r\n        }\r\n\r\n    }\r\n    \r\n    drawField( monsterInDesigner ) {\r\n\r\n        document.querySelector('body').addEventListener(\"dragstart\", function(e){ \r\n\r\n            if ( !e.target.id || e.target.id.charAt(0) != 'm' ) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                e.stopImmediatePropagation();\r\n                return false;\r\n            }\r\n\r\n        });\r\n\r\n        for ( let i = 0; i < 10; i++ ) {\r\n            for ( let j = 0; j < 10; j++ ) {\r\n\r\n                let holder = document.createElement('div');\r\n                holder.setAttribute('class', 'holder bg-mat-100');\r\n                holder.setAttribute('id', 'h'+i+'-'+j);\r\n\r\n                document.querySelector('#tiles').appendChild(holder);\r\n\r\n                this.holderAddEventListener( holder );\r\n\r\n            }\r\n        }\r\n\r\n        let designHolder = document.querySelector('div#hdesign');\r\n        this.holderAddEventListener( designHolder );\r\n\r\n        if ( monsterInDesigner ) {\r\n            document.querySelector('div.creation').style.display = \"none\";\r\n        } else {\r\n            document.querySelector('button#createMonster').style.display = \"none\";\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    holderAddEventListener( holder ) {\r\n        holder.addEventListener(\"dragover\", this.holderDragOver);\r\n\r\n        holder.addEventListener(\"dragenter\", this.holderDragEnter);\r\n        holder.addEventListener(\"dragleave\", this.holderDragLeave);\r\n    }\r\n\r\n    holderDragOver( event ) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    holderDragEnter( event ) {\r\n        event.target.classList.add(\"holder-hover\");\r\n    }\r\n    holderDragLeave( event ) {\r\n        event.target.classList.remove(\"holder-hover\");\r\n    }\r\n\r\n\r\n    drawTerrain( climate ) {\r\n\r\n        for ( let i = 0; i < 10; i++ ) {\r\n            for ( let j = 0; j < 10; j++ ) {\r\n\r\n                if ( climate.grid[i].Columns[j] == 1 ) {\r\n                    let holder = document.querySelector('#h'+i+'-'+j);\r\n                    \r\n                    holder.classList.add(\"terrain\");\r\n                    \r\n                    holder.removeEventListener(\"drop\", this.holderDrop);\r\n                    holder.removeEventListener(\"dragover\", this.holderDragOver);\r\n                }\r\n\r\n            }   \r\n        }\r\n\r\n        this.setClimateClass( climate.name );\r\n\r\n    }\r\n\r\n\r\n    setClimateClass( name ) {\r\n        let outer = document.querySelector('div.container-fluid.outer');\r\n        outer.classList.remove('jungle');\r\n        outer.classList.remove('sjahari');\r\n        outer.classList.remove('icepole');\r\n\r\n        outer.classList.add( name.toLowerCase() );\r\n    }\r\n\r\n    setClimateChangeEventListeners( controller ) {\r\n        \r\n        document.querySelector('button.jungle-btn').addEventListener(\"click\", function(){\r\n            controller.setClimate( 'jungle' );\r\n        });\r\n        document.querySelector('button.sjahari-btn').addEventListener(\"click\", function(){\r\n            controller.setClimate( 'sjahari' );\r\n        });\r\n        document.querySelector('button.icepole-btn').addEventListener(\"click\", function(){\r\n            controller.setClimate( 'icepole' );\r\n        });\r\n\r\n    }\r\n\r\n\r\n    setWeatherBadge( weather ) {\r\n\r\n        document.querySelector('span.badge.weather').innerHTML = weather;\r\n\r\n    }\r\n\r\n    setWeatherEventListeners( controller ) {\r\n\r\n        document.querySelector('span.badge.weather').addEventListener(\"click\", function() {\r\n            \r\n            if ( document.querySelector('div.weather-dropdown').style.display == \"block\" ) {\r\n                document.querySelector('div.weather-dropdown').style.display = \"none\";\r\n            } else {\r\n                document.querySelector('div.weather-dropdown').style.display = \"block\";\r\n            }\r\n\r\n        });\r\n\r\n        this.setWeatherChangeEventListeners( controller );\r\n\r\n    }\r\n\r\n    setWeatherChangeEventListeners( controller ) {\r\n\r\n        let weatherSpans = document.querySelectorAll('div.weather-dropdown span');\r\n        for ( let i = 0; i < weatherSpans.length; i++ ) {\r\n            \r\n            weatherSpans[i].addEventListener(\"click\", function() {\r\n                controller.setWeather( weatherSpans[i].innerHTML );\r\n\r\n                document.querySelector('div.weather-dropdown').style.display = \"none\";\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    getHolderPosition( x, y ) {\r\n\r\n        if ( x == 'designer' && y == 'designer' ) {\r\n            return document.querySelector('#hdesign');\r\n        } else {\r\n            return document.querySelector('#h'+x+'-'+y);\r\n        }\r\n\r\n    }\r\n\r\n    setMonsterPositionEventListeners( controller, climate ) {\r\n\r\n        let thisView = this;\r\n\r\n        for( let i = 0; i < 10; i++ ) {\r\n            for( let j = 0; j < 10; j++ ) {\r\n                if ( climate.grid[i].Columns[j] == 0 ) {\r\n                    let holder = document.querySelector('#h'+i+'-'+j);\r\n                    \r\n                    holder.addEventListener(\"drop\",  function(event) {\r\n                        thisView.monsterDropEventListener( event, 'xy', controller );\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        let designHolder = document.querySelector('div.holder.design')\r\n        designHolder.addEventListener(\"drop\",  function(event) {\r\n            thisView.monsterDropEventListener( event, 'designer', controller );\r\n        });\r\n\r\n    }\r\n\r\n    monsterDropEventListener( event, position, controller ) {\r\n        let data = event.dataTransfer.getData(\"draggable\");\r\n\r\n        if ( event.target.id.charAt(0) == 'h' && event.target.childElementCount == 0 ) {\r\n            event.target.appendChild(document.getElementById(data));\r\n\r\n            let x, y;\r\n            if ( position == 'designer' ) {\r\n                x = 'designer',\r\n                y = 'designer';\r\n            } else {\r\n                x = event.target.id.charAt(1),\r\n                y = event.target.id.charAt(3);\r\n            }\r\n\r\n            let audio = new Audio('../../../assets/drop.mp3');\r\n            audio.play();\r\n            setTimeout(function() {\r\n                audio.remove()\r\n            }, 2000);\r\n\r\n            controller.monsterChangedPosition(\r\n                data, \r\n                x, y\r\n            );\r\n        }\r\n\r\n        event.target.classList.remove(\"holder-hover\");\r\n    }\r\n    \r\n\r\n    setupMonsterConfigurator( controller ) {\r\n\r\n        document.querySelector('button.delete-monster-btn').addEventListener('click', function() {\r\n            \r\n            controller.removeMonsterInDesigner();\r\n\r\n        });\r\n\r\n        document.querySelector('button#createMonster').addEventListener('click', function() {\r\n            document.querySelector('button#createMonster').style.display = \"none\";\r\n            document.querySelector('div.creation').style.display = \"block\";\r\n            \r\n            controller.createNewMonster();\r\n        });\r\n\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = new terrainView();\n\n//# sourceURL=webpack:///./src/views/terrainView.js?");

/***/ })

/******/ });