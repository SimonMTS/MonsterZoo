/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/init.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/climate.json":
/*!**************************!*\
  !*** ./src/climate.json ***!
  \**************************/
/*! exports provided: climates, default */
/***/ (function(module) {

eval("module.exports = {\"climates\":[{\"name\":\"Jungle\",\"climate\":\"bear grylls approved temperature\",\"reference city\":\"Rio de Janeiro\",\"grid\":[{\"name\":\"Row1\",\"Columns\":[\"1\",\"0\",\"0\",\"0\",\"1\",\"1\",\"0\",\"0\",\"0\",\"1\"]},{\"name\":\"Row2\",\"Columns\":[\"1\",\"0\",\"0\",\"1\",\"0\",\"0\",\"1\",\"0\",\"0\",\"1\"]},{\"name\":\"Row3\",\"Columns\":[\"1\",\"0\",\"1\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\"]},{\"name\":\"Row4\",\"Columns\":[\"1\",\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"1\"]},{\"name\":\"Row5\",\"Columns\":[\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\"]},{\"name\":\"Row6\",\"Columns\":[\"1\",\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\"]},{\"name\":\"Row7\",\"Columns\":[\"1\",\"0\",\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\"]},{\"name\":\"Row8\",\"Columns\":[\"1\",\"0\",\"0\",\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\"]},{\"name\":\"Row9\",\"Columns\":[\"1\",\"0\",\"0\",\"0\",\"1\",\"1\",\"0\",\"0\",\"0\",\"1\"]},{\"name\":\"Row10\",\"Columns\":[\"1\",\"0\",\"0\",\"0\",\"1\",\"1\",\"0\",\"0\",\"0\",\"1\"]}]},{\"name\":\"IcePole\",\"climate\":\"sub-zero cold\",\"reference city\":\"Amsterdam\",\"grid\":[{\"name\":\"Row1\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"1\",\"1\",\"0\",\"0\",\"0\",\"1\"]},{\"name\":\"Row2\",\"Columns\":[\"0\",\"0\",\"0\",\"1\",\"0\",\"0\",\"1\",\"0\",\"0\",\"1\"]},{\"name\":\"Row3\",\"Columns\":[\"0\",\"0\",\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\"]},{\"name\":\"Row4\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"1\"]},{\"name\":\"Row5\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\"]},{\"name\":\"Row6\",\"Columns\":[\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row7\",\"Columns\":[\"1\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row8\",\"Columns\":[\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row9\",\"Columns\":[\"1\",\"0\",\"0\",\"0\",\"1\",\"1\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row10\",\"Columns\":[\"1\",\"0\",\"0\",\"0\",\"1\",\"1\",\"0\",\"0\",\"0\",\"0\"]}]},{\"name\":\"Sjahari\",\"climate\":\"burning hot\",\"reference city\":\"Marrakech\",\"grid\":[{\"name\":\"Row1\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row2\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row3\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"0\"]},{\"name\":\"Row4\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row5\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row6\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row7\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row8\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row9\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]},{\"name\":\"Row10\",\"Columns\":[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]}]}]};\n\n//# sourceURL=webpack:///./src/climate.json?");

/***/ }),

/***/ "./src/controllers/monsterController.js":
/*!**********************************************!*\
  !*** ./src/controllers/monsterController.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let monsterModel = __webpack_require__(/*! ../models/monsterModel.js */ \"./src/models/monsterModel.js\"),\r\n    monsterView = __webpack_require__(/*! ../views/monsterView.js */ \"./src/views/monsterView.js\"),\r\n    terrainModel = __webpack_require__(/*! ../models/terrainModel.js */ \"./src/models/terrainModel.js\"),\r\n    terrainView = __webpack_require__(/*! ../views/terrainView.js */ \"./src/views/terrainView.js\"),\r\n    configuratorView = __webpack_require__(/*! ../views/configuratorView.js */ \"./src/views/configuratorView.js\");\r\n\r\nclass monsterController {\r\n\r\n    constructor() {\r\n        \r\n        terrainView.setupMonsterConfigurator( this );\r\n\r\n    }\r\n\r\n    addMonstersToTerrain( climate ) {\r\n\r\n        let monsterLocations = monsterModel.getMonsterLocations( climate );\r\n\r\n        monsterView.drawMonsters( monsterLocations, this );\r\n\r\n    }\r\n\r\n    createNewMonster() {\r\n\r\n        if ( monsterModel.getMonsterInDesigner() === false ) {\r\n\r\n            monsterModel.addMonsterToLocation( monsterModel.generateMonsterID() );\r\n\r\n            configuratorView.generateNewMonster();\r\n    \r\n            let climate = terrainModel.getClimateByName( terrainModel.getCurrentClimate() );\r\n            this.addMonstersToTerrain( climate );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    updateMonsterProperties( id, properties ) {\r\n\r\n        monsterModel.saveMonsterProperties( id, properties );\r\n\r\n    }\r\n\r\n    retrieveMonsterProperties( id ) {\r\n\r\n        return monsterModel.getMonsterProperties( id );\r\n\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = new monsterController();\n\n//# sourceURL=webpack:///./src/controllers/monsterController.js?");

/***/ }),

/***/ "./src/controllers/terrainController.js":
/*!**********************************************!*\
  !*** ./src/controllers/terrainController.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let terrainModel = __webpack_require__(/*! ../models/terrainModel.js */ \"./src/models/terrainModel.js\"),\r\n    terrainView = __webpack_require__(/*! ../views/terrainView.js */ \"./src/views/terrainView.js\"),\r\n    configuratorView = __webpack_require__(/*! ../views/configuratorView.js */ \"./src/views/configuratorView.js\"),\r\n    monsterModel = __webpack_require__(/*! ../models/monsterModel.js */ \"./src/models/monsterModel.js\");\r\n\r\nclass terrainController {\r\n\r\n    setInitClimate() {\r\n\r\n        let currentClimateName = terrainModel.getCurrentClimate();\r\n\r\n        this.setClimate( currentClimateName );\r\n        terrainView.setClimateChangeEventListeners( this );\r\n\r\n        terrainView.setWeatherEventListeners( this );\r\n\r\n        configuratorView.setConfiguratorEventListeners();\r\n        configuratorView.validateConfiguratorFields();\r\n\r\n        configuratorView.getValuesAsObject(); // todo temp remove\r\n    \r\n    }\r\n\r\n    setClimate( name ) {\r\n\r\n        terrainView.emptyField();\r\n        terrainView.drawField( monsterModel.getMonsterInDesigner() === false );\r\n\r\n        let climate = terrainModel.getClimateByName( name );\r\n\r\n        terrainModel.getWeatherFromClimate( this, climate, function( controller, weather ) {\r\n            if ( weather ) {\r\n                controller.setWeather( weather );\r\n            } else {\r\n                controller.setWeather( '...' );\r\n            }\r\n        });\r\n\r\n        terrainView.drawTerrain( climate );\r\n        \r\n        this.monsterController.addMonstersToTerrain( climate );\r\n        terrainView.setMonsterPositionEventListeners( this, climate );\r\n\r\n        terrainModel.setCurrentClimate( climate.name.toLowerCase() );\r\n\r\n    }\r\n\r\n    setWeather( weather ) {\r\n        \r\n        terrainView.setWeatherBadge( weather );\r\n        terrainModel.setWeather( weather.toLowerCase() );\r\n\r\n    }\r\n\r\n    setMonsterController( monsterController ) {\r\n        this.monsterController = monsterController;\r\n    }\r\n\r\n    monsterChangedPosition( id, x, y ) {\r\n        monsterModel.moveMonsterToLocation( terrainModel.getCurrentClimate(), id, x, y );\r\n        configuratorView.updateConfigurator( monsterModel.getMonsterInDesigner(), this );\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = new terrainController();\n\n//# sourceURL=webpack:///./src/controllers/terrainController.js?");

/***/ }),

/***/ "./src/init.js":
/*!*********************!*\
  !*** ./src/init.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\r\n    console.log('webs3 - Simon Striekwold');\r\n\r\n    let terrainController = __webpack_require__(/*! ./controllers/terrainController.js */ \"./src/controllers/terrainController.js\");\r\n\r\n    let monsterController = __webpack_require__(/*! ./controllers/monsterController.js */ \"./src/controllers/monsterController.js\");\r\n\r\n    terrainController.setMonsterController( monsterController );\r\n\r\n    terrainController.setInitClimate();\n\n//# sourceURL=webpack:///./src/init.js?");

/***/ }),

/***/ "./src/models/monsterModel.js":
/*!************************************!*\
  !*** ./src/models/monsterModel.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let terrainModel = __webpack_require__(/*! ./terrainModel.js */ \"./src/models/terrainModel.js\");\r\n    \r\nclass monsterModel {\r\n\r\n    constructor() {\r\n\r\n        if ( localStorage.getItem('monsterLocations') == null ) {\r\n            this.locations = {};\r\n            this.locations.jungle = [];\r\n            this.locations.sjahari = [];\r\n            this.locations.icepole = [];\r\n            this.locations.designer = [];\r\n            \r\n            localStorage.setItem('monsterLocations', JSON.stringify(this.locations));\r\n        }\r\n\r\n        this.locations = JSON.parse( localStorage.getItem('monsterLocations') );\r\n\r\n    }\r\n\r\n    generateMonsterID() {\r\n        return 'm' + ( this.locations.jungle.length + this.locations.sjahari.length + this.locations.icepole.length );\r\n    }\r\n\r\n    getMonsterInDesigner() {\r\n\r\n        if ( !this.locations.designer[0] ) {\r\n            return false;\r\n        }\r\n\r\n        return this.locations.designer[0];\r\n\r\n    }\r\n\r\n    saveLocations() {\r\n        localStorage.setItem('monsterLocations', JSON.stringify(this.locations));\r\n    }\r\n\r\n    addMonsterToLocation( id ) {\r\n        \r\n        this.locations.designer.push({\r\n            'id': id,\r\n            'x': 'designer',\r\n            'y': 'designer'\r\n        });\r\n\r\n        this.saveLocations();\r\n\r\n    }\r\n    \r\n    moveMonsterToLocation( climate, id, x, y ) {\r\n        \r\n        let climateLocations = this.locations[climate];\r\n        let designerLocations = this.locations.designer;\r\n        let visableMonsters = climateLocations.concat( designerLocations );\r\n\r\n        let monster = visableMonsters.find(function(element){\r\n            return element.id == id;\r\n        });\r\n\r\n        let index = this.locations[climate].indexOf(monster);\r\n        if ( index >= 0 ) {\r\n\r\n            this.locations[climate].splice(index, 1);\r\n\r\n        } else {\r\n\r\n            this.locations.designer = [];\r\n\r\n        }\r\n\r\n        if ( !(x == 'designer' && y == 'designer') ) {\r\n            \r\n            this.locations[climate].push({\r\n                'id': monster.id,\r\n                'x': x,\r\n                'y': y\r\n            });\r\n\r\n        } else {\r\n\r\n            this.locations.designer.push({\r\n                'id': monster.id,\r\n                'x': x,\r\n                'y': y\r\n            });\r\n\r\n        }\r\n\r\n\r\n        this.saveLocations();\r\n\r\n    }\r\n\r\n    getMonsterLocations( climate ) {\r\n\r\n        let climateLocations = this.locations[climate.name.toLowerCase()];\r\n        let designerLocations = this.locations.designer;\r\n\r\n        return climateLocations.concat( designerLocations );\r\n\r\n    }\r\n\r\n    saveMonsterProperties( id, properties ) {\r\n\r\n        localStorage.setItem(id, JSON.stringify( properties ));\r\n\r\n    }\r\n\r\n    getMonsterProperties( id ) {\r\n\r\n        return JSON.parse( localStorage.getItem( id ) );\r\n\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = new monsterModel();\n\n//# sourceURL=webpack:///./src/models/monsterModel.js?");

/***/ }),

/***/ "./src/models/terrainModel.js":
/*!************************************!*\
  !*** ./src/models/terrainModel.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let climateData = __webpack_require__(/*! ../climate.json */ \"./src/climate.json\");\r\n\r\nclass terrainModel {\r\n\r\n    constructor() {\r\n\r\n        if ( localStorage.getItem('currentClimate') == null ) {\r\n            localStorage.setItem('currentClimate', 'jungle');\r\n        }\r\n\r\n        this.weather = '...';\r\n\r\n    }\r\n\r\n    getCurrentClimate() {\r\n        return localStorage.getItem('currentClimate');\r\n    }\r\n\r\n    setCurrentClimate( name ) {\r\n        localStorage.setItem('currentClimate', name);\r\n    }\r\n\r\n    getClimateByName( name ) {\r\n        return climateData.climates.find(o => o.name.toLowerCase() === name);\r\n    }\r\n\r\n    getWeatherFromClimate( controller, climate, __callback ) {\r\n        /*\r\n            Thunderstorm\r\n            Drizzle\r\n            Rain\r\n            Snow\r\n            Mist\r\n            Smoke\r\n            Haze\r\n            Dust\r\n            Fog\r\n            Sand\r\n            Dust\r\n            Ash\r\n            Squall\r\n            Tornado\r\n            Clear\r\n            Clouds\r\n        */\r\n\r\n        let city = climate['reference city'];\r\n\r\n        let apiKey = '2adeeb754ec26a7e97c574b2c5d0d959';\r\n        let apiUrl = 'https://api.openweathermap.org/data/2.5/forecast?appid='+apiKey+'&q='+city;\r\n\r\n        fetch(apiUrl)\r\n            .then(\r\n                function(response) {\r\n                    if (response.status !== 200) {\r\n                        __callback( controller, null );\r\n                    }\r\n\r\n                    // Examine the text in the response\r\n                    response.json().then(function(data) {\r\n\r\n                        try {\r\n                            __callback( controller, data.list[0].weather[0].main );\r\n                        } catch ( e ) {\r\n                            __callback( controller, null );\r\n                        }\r\n\r\n                    });\r\n                }\r\n            )\r\n            .catch(function(err) {\r\n                __callback( controller, null );\r\n            });\r\n\r\n    }\r\n\r\n    setWeather( weather ) {\r\n        this.weather = weather;\r\n    }\r\n\r\n    getWeather() {\r\n        return this.weather;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = new terrainModel();\n\n//# sourceURL=webpack:///./src/models/terrainModel.js?");

/***/ }),

/***/ "./src/views/configuratorView.js":
/*!***************************************!*\
  !*** ./src/views/configuratorView.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class configuratorView {\r\n    \r\n    constructor() {\r\n\r\n        this.randomNames = [ 'aamon', 'abaddon', 'abezethibou', 'abraxas', 'abyzou', 'adramelech', 'aeshma', 'agaliarept', 'agares', 'agiel', 'agrat', 'ahriman', 'aim', 'akoman', 'akvan', 'ala', 'alal', 'alastor', 'allocer', 'alloces', 'allu', 'alu', 'amaymon', 'amdusias', 'amon', 'amy', 'anamalech', 'ancitif', 'andhaka', 'andras', 'andrealphus', 'andromalius', 'antichrist', 'anzu', 'apollyon', 'archon', 'armaros', 'arunasura', 'asag', 'asakku', 'asbel', 'asmodai', 'asmodeus', 'astaroth', 'asura', 'azazel', 'baal', 'babi', 'bael', 'bakasura', 'balam', 'balberith', 'banshee', 'baphomet', 'barbas', 'barbatos', 'barong', 'bathin', 'bathym', 'beelzebub', 'behemoth', 'beherit', 'beleth', 'belial', 'belphegor', 'berith', 'bhoot', 'bhuta', 'bifrons', 'boruta', 'botis', 'buer', 'bukavac', 'bune', 'bushyasta', 'caacrinolaas', 'caassimolar', 'caim', 'camio', 'canio', 'cerbere', 'charun', 'chax', 'chemosh', 'choronzon', 'cimeies', 'cimejes', 'classyalabolas', 'corson', 'crocell', 'crocell', 'culsu', 'daeva', 'dagon', 'dahak', 'dahaka', 'dajjal', 'dajjal', 'danjal', 'dantalion', 'decarabia', 'demiurge', 'demogorgon', 'devil', 'drekavac', 'dzoavits', 'eblis', 'eisheth', 'eligos', 'flauros', 'flavros', 'focalor', 'foraii', 'foras', 'forcas', 'forneus', 'forras', 'furcas', 'furfur', 'gaap', 'gaderel', 'gaki', 'gamigin', 'ghoul', 'glassialabolis', 'gomory', 'gorgon', 'gremory', 'grigori', 'gualichu', 'guayota', 'gusion', 'gusoin', 'gusoyn', 'haagenti', 'haborym', 'halphas', 'hauras', 'haures', 'havres', 'ifrit', 'incubus', 'ipes', 'ipos', 'jikininki', 'jinn', 'kabandha', 'kabhanda', 'kali', 'kasadya', 'kimaris', 'kokabiel', 'krampus', 'kroni', 'kumbhakarna', 'lechies', 'legion', 'lempo', 'leraie', 'leraje', 'leviathan', 'leyak', 'lili', 'lilim', 'lilin', 'lilin', 'lilith', 'lucifer', 'malaphar', 'malephar', 'malphas', 'malthus', 'mammon', 'mara', 'marax', 'marchosias', 'maricha', 'marthim', 'mastema', 'mathim', 'mephistopheles', 'merihem', 'moloch', 'morax', 'morpheus', 'murmur', 'naamah', 'naberius', 'naberus', 'namtar', 'nero', 'ninurta', 'onoskelis', 'orcus', 'ordog', 'orias', 'oriax', 'orobas', 'ose', 'paimon', 'pazuzu', 'pelesit', 'penemue', 'phenex', 'pithius', 'pocong', 'pontianak', 'preta', 'procell', 'pruflas', 'puloman', 'rahab', 'rakshasa', 'rangda', 'raum', 'ravana', 'ronove', 'rusalka', 'sabnock', 'saleos', 'samael', 'satan', 'seir', 'semyaz', 'shax', 'shedim', 'sitri', 'solas', 'sthenno', 'stolas', 'suanggi', 'succubus', 'surgat', 'tannin', 'toyol', 'tuchulcha', 'ukobach', 'valac', 'valefar', 'vanth', 'vapula', 'vassago', 'vepar', 'vine', 'wendigo', 'xaphan', 'xezbeth', 'yeqon', 'yeterel', 'zagan', 'zahhak', 'zepar', 'ziminiar', 'zu' ];\r\n\r\n        this.inputFields = {\r\n            \"typeOfMonster\":    document.querySelector('div#typeOfMonster select'),\r\n            \"monsterName\":      document.querySelector('div#monsterName input'),\r\n            \"numberOfArms\":     document.querySelector('div#numberOfArms select'),\r\n            \"typeOfArm\":        document.querySelector('div#typeOfArm select'),\r\n            \"numberOfLegs\":     document.querySelector('div#numberOfLegs select'),\r\n            \"numberOfEyes\":     document.querySelector('div#numberOfEyes select'),\r\n            \"typeOfFur\":        document.querySelector('div#typeOfFur select'),\r\n            \"monsterColor\":     document.querySelector('div#monsterColor select'),\r\n            \"monsterCanFly\":    document.querySelector('div#monsterCanFly input'),\r\n            \"monsterCanSwim\":    document.querySelector('div#monsterCanSwim input')\r\n        };\r\n    }\r\n\r\n    getValuesAsObject() {\r\n\r\n        let obj = {\r\n            \"monsterName\": this.inputFields['monsterName'].value,\r\n            \"typeOfMonster\": this.inputFields['typeOfMonster'].value,\r\n            \"numberOfArms\": parseInt(this.inputFields['numberOfArms'].value),\r\n            \"typeOfArm\": this.inputFields['typeOfArm'].value,\r\n            \"numberOfLegs\": parseInt(this.inputFields['numberOfLegs'].value),\r\n            \"numberOfEyes\": parseInt(this.inputFields['numberOfEyes'].value),\r\n            \"typeOfFur\": this.inputFields['typeOfFur'].value,\r\n            \"monsterColor\": this.inputFields['monsterColor'].value,\r\n            \"monsterCanFly\": this.inputFields['monsterCanFly'].checked,\r\n            \"monsterCanSwim\": this.inputFields['monsterCanSwim'].checked\r\n        };\r\n\r\n        return obj;\r\n\r\n    }\r\n\r\n    updateConfigurator( monsterInDesigner, controller ) {\r\n\r\n        if ( monsterInDesigner === false ) {\r\n\r\n            document.querySelector('button#createMonster').style.display = \"block\";\r\n            document.querySelector('div.creation').style.display = \"none\";\r\n\r\n        } else {\r\n\r\n            document.querySelector('button#createMonster').style.display = \"none\";\r\n            document.querySelector('div.creation').style.display = \"block\";\r\n\r\n            this.loadMonsterData( monsterInDesigner, controller );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    loadMonsterData( monster, controller ) {\r\n\r\n        let properties = controller.monsterController.retrieveMonsterProperties( monster.id );\r\n\r\n        this.inputFields['monsterName'].value = properties.monsterName;\r\n        this.inputFields['typeOfMonster'].value = properties.typeOfMonster;\r\n        this.inputFields['numberOfArms'].value = properties.numberOfArms;\r\n        this.inputFields['typeOfArm'].value = properties.typeOfArm;\r\n        this.inputFields['numberOfLegs'].value = properties.numberOfLegs;\r\n        this.inputFields['numberOfEyes'].value = properties.numberOfEyes;\r\n        this.inputFields['typeOfFur'].value = properties.typeOfFur;\r\n        this.inputFields['monsterColor'].value = properties.monsterColor;\r\n        this.inputFields['monsterCanFly'].checked = properties.monsterCanFly;\r\n        this.inputFields['monsterCanSwim'].checked = properties.monsterCanSwim;\r\n\r\n        this.validateConfiguratorFields();\r\n\r\n    }\r\n\r\n    generateNewMonster() {\r\n\r\n        let randomNumber = Math.floor(Math.random() * 4);\r\n\r\n        this.inputFields['monsterName'].value = '';\r\n        this.inputFields['typeOfMonster'].value = this.inputFields['typeOfMonster'].options[ randomNumber ].value;\r\n        this.inputFields['numberOfArms'].value = false;\r\n        this.inputFields['typeOfArm'].value = false;\r\n        this.inputFields['numberOfLegs'].value = false;\r\n        this.inputFields['numberOfEyes'].value = false;\r\n        this.inputFields['typeOfFur'].value = false;\r\n        this.inputFields['monsterColor'].value = false;\r\n        this.inputFields['monsterCanFly'].checked = false;\r\n        this.inputFields['monsterCanSwim'].checked = false;\r\n\r\n        this.validateConfiguratorFields();\r\n\r\n    }\r\n\r\n\r\n    setConfiguratorEventListeners() {\r\n\r\n        let thisView = this;\r\n        document.querySelector('div#typeOfMonster select'   ).addEventListener(\"change\",  function(event) { thisView.validateConfiguratorFields() });\r\n        document.querySelector('div#monsterName input'      ).addEventListener(\"change\",  function(event) { thisView.validateConfiguratorFields() });\r\n        document.querySelector('div#numberOfArms select'    ).addEventListener(\"change\",  function(event) { thisView.validateConfiguratorFields() });\r\n        document.querySelector('div#typeOfArm select'       ).addEventListener(\"change\",  function(event) { thisView.validateConfiguratorFields() });\r\n        document.querySelector('div#numberOfLegs select'    ).addEventListener(\"change\",  function(event) { thisView.validateConfiguratorFields() });\r\n        document.querySelector('div#numberOfEyes select'    ).addEventListener(\"change\",  function(event) { thisView.validateConfiguratorFields() });\r\n        document.querySelector('div#typeOfFur select'       ).addEventListener(\"change\",  function(event) { thisView.validateConfiguratorFields() });\r\n        document.querySelector('div#monsterColor select'    ).addEventListener(\"change\",  function(event) { thisView.validateConfiguratorFields() });\r\n        document.querySelector('div#monsterCanFly input'    ).addEventListener(\"change\",  function(event) { thisView.validateConfiguratorFields() });\r\n        document.querySelector('div#monsterCanSwim input'   ).addEventListener(\"change\",  function(event) { thisView.validateConfiguratorFields() });\r\n\r\n    }\r\n\r\n    validateConfiguratorFields() {\r\n\r\n        this.validateMonsterName( this.inputFields );\r\n        this.validateNumberOfArms( this.inputFields );\r\n        this.validateTypeOfArm( this.inputFields );\r\n        this.validateNumberOfLegs( this.inputFields );\r\n        this.validateNumberOfEyes( this.inputFields );\r\n        this.validateTypeOfFur( this.inputFields );\r\n        this.validateMonsterColor( this.inputFields );\r\n        this.validateMonsterCanFly( this.inputFields );\r\n        this.validateMonsterCanSwim( this.inputFields );\r\n\r\n    }\r\n\r\n    validateNumberOfArms( inputFields ) {\r\n        \r\n        let numberOfArms = inputFields['numberOfArms'];\r\n        let possibleValues = [];\r\n        let previousValue = (numberOfArms.options[ numberOfArms.selectedIndex ] ? numberOfArms.options[ numberOfArms.selectedIndex ].value : null );\r\n\r\n        let typeOfMonster = inputFields['typeOfMonster'];\r\n        if ( 'water' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 1, 2, 3, 4, 5, 6, 7, 8 ];\r\n        } else if ( 'fire' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 1, 2, 3, 4, 5, 6 ];\r\n        } else if ( 'earth' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 2 ];\r\n        } else if ( 'wind' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 2 ];\r\n        }\r\n\r\n        for ( let i = numberOfArms.options.length - 1 ; i >= 0 ; i-- ) {\r\n\r\n            numberOfArms.remove( i );\r\n\r\n        }\r\n\r\n        for ( let i = 0; i < possibleValues.length; i++ ) {\r\n            \r\n            var option = document.createElement(\"option\");\r\n            option.text = ''+ possibleValues[i];\r\n\r\n            if ( previousValue != null && previousValue == option.text ) {\r\n                option.selected = 'selected';\r\n            }\r\n            \r\n            numberOfArms.add( option );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    validateTypeOfArm( inputFields ) {\r\n\r\n        let typeOfArm = inputFields['typeOfArm'];\r\n        let possibleValues = [];\r\n        let previousValue = (typeOfArm.options[ typeOfArm.selectedIndex ] ? typeOfArm.options[ typeOfArm.selectedIndex ].value : null );\r\n\r\n        let typeOfMonster = inputFields['typeOfMonster'];\r\n        if ( 'water' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Tentacles', 'Fins' ];\r\n        } else if ( 'fire' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Tentacles','Claws', 'Claw-Wings' ];\r\n        } else if ( 'earth' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Claws' ];\r\n        } else if ( 'wind' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Wings', 'Claw-Wings' ];\r\n        }\r\n\r\n        for ( let i = typeOfArm.options.length - 1 ; i >= 0 ; i-- ) {\r\n            typeOfArm.remove( i );\r\n        }\r\n\r\n        for ( let i = 0; i < possibleValues.length; i++ ) {\r\n            \r\n            var option = document.createElement(\"option\");\r\n            option.text = ''+ possibleValues[i];\r\n\r\n            if ( previousValue != null && previousValue == option.text ) {\r\n                option.selected = 'selected';\r\n            }\r\n            \r\n            typeOfArm.add( option );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    validateNumberOfLegs( inputFields ) {\r\n\r\n        let numberOfLegs = inputFields['numberOfLegs'];\r\n        let possibleValues = [];\r\n        let previousValue = (numberOfLegs.options[ numberOfLegs.selectedIndex ] ? numberOfLegs.options[ numberOfLegs.selectedIndex ].value : null );\r\n\r\n        let typeOfMonster = inputFields['typeOfMonster'];\r\n        let numberOfArms = inputFields['numberOfArms'];\r\n        if ( \r\n            'water' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() && \r\n            numberOfArms.options[ numberOfArms.selectedIndex ].value <= 4\r\n        ) {\r\n            possibleValues = [ 1, 2, 3, 4 ];\r\n        } else if ( \r\n            'water' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() && \r\n            numberOfArms.options[ numberOfArms.selectedIndex ].value > 4\r\n        ) {\r\n            possibleValues = [ 'Only arms' ];\r\n        } else if ( \r\n            'fire' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() && \r\n            numberOfArms.options[ numberOfArms.selectedIndex ].value <= 2\r\n        ) {\r\n            possibleValues = [ 2 ];\r\n        }  else if ( \r\n            'fire' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() && \r\n            numberOfArms.options[ numberOfArms.selectedIndex ].value > 2\r\n        ) {\r\n            possibleValues = [ 'Only arms' ];\r\n        } else if ( 'earth' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 2, 4, 6 ];\r\n        } else if ( 'wind' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 0, 2 ];\r\n        }\r\n\r\n        for ( let i = numberOfLegs.options.length - 1 ; i >= 0 ; i-- ) {\r\n            numberOfLegs.remove( i );\r\n        }\r\n\r\n        for ( let i = 0; i < possibleValues.length; i++ ) {\r\n            \r\n            var option = document.createElement(\"option\");\r\n            option.text = ''+ possibleValues[i];\r\n\r\n            if ( previousValue != null && previousValue == option.text ) {\r\n                option.selected = 'selected';\r\n            }\r\n            \r\n            numberOfLegs.add( option );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    validateNumberOfEyes( inputFields ) {\r\n        \r\n        let numberOfEyes = inputFields['numberOfEyes'];\r\n        let possibleValues = [];\r\n        let previousValue = (numberOfEyes.options[ numberOfEyes.selectedIndex ] ? numberOfEyes.options[ numberOfEyes.selectedIndex ].value : null );\r\n\r\n        let typeOfMonster = inputFields['typeOfMonster'];\r\n        if ( 'water' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 1, 2, 3, 4, 5, 6, 7, 8 ];\r\n        } else if ( 'fire' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 1, 2, 3, 4 ];\r\n        } else if ( 'earth' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 2 ];\r\n        } else if ( 'wind' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 2 ];\r\n        }\r\n\r\n        for ( let i = numberOfEyes.options.length - 1 ; i >= 0 ; i-- ) {\r\n\r\n            numberOfEyes.remove( i );\r\n\r\n        }\r\n\r\n        for ( let i = 0; i < possibleValues.length; i++ ) {\r\n            \r\n            var option = document.createElement(\"option\");\r\n            option.text = ''+ possibleValues[i];\r\n\r\n            if ( previousValue != null && previousValue == option.text ) {\r\n                option.selected = 'selected';\r\n            }\r\n            \r\n            numberOfEyes.add( option );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    validateTypeOfFur( inputFields ) {\r\n        \r\n        let typeOfFur = inputFields['typeOfFur'];\r\n        let possibleValues = [];\r\n        let previousValue = (typeOfFur.options[ typeOfFur.selectedIndex ] ? typeOfFur.options[ typeOfFur.selectedIndex ].value : null );\r\n\r\n        let typeOfMonster = inputFields['typeOfMonster'];\r\n        if ( 'water' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Scales', 'Slime' ];\r\n        } else if ( 'fire' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Scales', 'Feathers' ];\r\n        } else if ( 'earth' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Hair', 'Scales', 'Slime' ];\r\n        } else if ( 'wind' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Feathers', 'Hair', 'Scales' ];\r\n        }\r\n\r\n        for ( let i = typeOfFur.options.length - 1 ; i >= 0 ; i-- ) {\r\n\r\n            typeOfFur.remove( i );\r\n\r\n        }\r\n\r\n        for ( let i = 0; i < possibleValues.length; i++ ) {\r\n            \r\n            var option = document.createElement(\"option\");\r\n            option.text = ''+ possibleValues[i];\r\n\r\n            if ( previousValue != null && previousValue == option.text ) {\r\n                option.selected = 'selected';\r\n            }\r\n            \r\n            typeOfFur.add( option );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    validateMonsterColor( inputFields ) {\r\n        \r\n        let monsterColor = inputFields['monsterColor'];\r\n        let possibleValues = [];\r\n        let previousValue = (monsterColor.options[ monsterColor.selectedIndex ] ? monsterColor.options[ monsterColor.selectedIndex ].value : null );\r\n\r\n        let typeOfMonster = inputFields['typeOfMonster'];\r\n        if ( 'water' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Blue', 'Red', 'Green' ];\r\n        } else if ( 'fire' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Red', 'Orange', 'Brown' ];\r\n        } else if ( 'earth' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'Purple', 'Orange', 'White' ];\r\n        } else if ( 'wind' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            possibleValues = [ 'White', 'Blue', 'Purple' ];\r\n        }\r\n\r\n        for ( let i = monsterColor.options.length - 1 ; i >= 0 ; i-- ) {\r\n\r\n            monsterColor.remove( i );\r\n\r\n        }\r\n\r\n        for ( let i = 0; i < possibleValues.length; i++ ) {\r\n            \r\n            var option = document.createElement(\"option\");\r\n            option.text = ''+ possibleValues[i];\r\n\r\n            if ( previousValue != null && previousValue == option.text ) {\r\n                option.selected = 'selected';\r\n            }\r\n            \r\n            monsterColor.add( option );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    validateMonsterCanFly( inputFields ) {\r\n        \r\n        let monsterCanFly = inputFields['monsterCanFly'];\r\n\r\n        let typeOfMonster = inputFields['typeOfMonster'];\r\n        let typeOfFur = inputFields['typeOfFur'];\r\n        if ( 'water' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            monsterCanFly.checked = false;\r\n        } else if ( \r\n            'fire' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() &&\r\n            typeOfFur.options[ typeOfFur.selectedIndex ].value.toLowerCase() == 'feathers'\r\n        ) {\r\n            monsterCanFly.checked = true;\r\n        } else if ( 'fire' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            monsterCanFly.checked = false;\r\n        } else if ( 'earth' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            monsterCanFly.checked = false;\r\n        } else if ( 'wind' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            monsterCanFly.checked = true;\r\n        }\r\n\r\n    }\r\n\r\n    validateMonsterCanSwim( inputFields ) {\r\n        \r\n        let monsterCanSwim = inputFields['monsterCanSwim'];\r\n\r\n        let typeOfMonster = inputFields['typeOfMonster'];\r\n        let typeOfFur = inputFields['typeOfFur'];\r\n        if ( 'water' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            monsterCanSwim.checked = true;\r\n        } else if ( 'fire' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            monsterCanSwim.checked = false;\r\n        } else if ( 'earth' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            monsterCanSwim.checked = false;\r\n        } else if ( \r\n            'wind' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() &&\r\n            (\r\n                typeOfFur.options[ typeOfFur.selectedIndex ].value.toLowerCase() == 'hair' ||\r\n                typeOfFur.options[ typeOfFur.selectedIndex ].value.toLowerCase() == 'scales'\r\n            )\r\n        ) {\r\n            monsterCanSwim.checked = true;\r\n        } else if ( 'wind' == typeOfMonster.options[ typeOfMonster.selectedIndex ].value.toLowerCase() ) {\r\n            monsterCanSwim.checked = false;\r\n        }\r\n\r\n    }\r\n\r\n    validateMonsterName( inputFields ) {\r\n\r\n        let monsterName = inputFields['monsterName'];\r\n        if ( monsterName.value == '' ) {\r\n\r\n            let randomNumber = Math.floor(Math.random() * this.randomNames.length);\r\n            monsterName.value = this.randomNames[randomNumber];\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = new configuratorView();\n\n//# sourceURL=webpack:///./src/views/configuratorView.js?");

/***/ }),

/***/ "./src/views/monsterView.js":
/*!**********************************!*\
  !*** ./src/views/monsterView.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let terrainView = __webpack_require__(/*! ./terrainView.js */ \"./src/views/terrainView.js\"),\r\n    configuratorView = __webpack_require__(/*! ./configuratorView.js */ \"./src/views/configuratorView.js\");\r\n\r\nclass monsterView {\r\n\r\n    getBaseMonster() {\r\n\r\n        let monster = document.createElement('div');\r\n        monster.setAttribute('class', 'monster');\r\n        monster.setAttribute('draggable', 'true');\r\n\r\n        let image = document.createElement('img');\r\n        image.src = 'https://placekitten.com/300/300';\r\n        image.setAttribute('draggable', 'false');\r\n        // image.addEventListener('dragstart', function(e) {\r\n        //     e.preventDefault();\r\n        //     console.log('child-drag');\r\n        //     return;\r\n        // });\r\n\r\n        monster.appendChild( image );\r\n\r\n        return monster;\r\n\r\n    }\r\n\r\n    drawMonsters( locations, controller ) {\r\n\r\n        for ( let i = 0; i < locations.length; i++ ) {\r\n            let holder = terrainView.getHolderPosition( locations[i].x, locations[i].y );\r\n\r\n            if ( holder.childElementCount > 0 ) {\r\n                continue;\r\n            }\r\n\r\n            this.drawMonster( holder, controller, {\r\n                'id': locations[i].id\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    drawMonster( container, controller, properties ) {\r\n        \r\n        let monster = this.getBaseMonster();\r\n        let savedProperties = controller.retrieveMonsterProperties( properties.id );\r\n\r\n        monster.setAttribute('id', properties.id);\r\n        monster.style.backgroundColor = savedProperties.monsterColor;\r\n\r\n        container.appendChild( monster );\r\n\r\n        this.addMonsterEventListener( monster, controller );\r\n\r\n    }\r\n\r\n    addMonsterEventListener( monster, controller ) {\r\n\r\n        monster.addEventListener('click', function(e) {\r\n            thisView.monsterClick(e, controller);\r\n        });\r\n\r\n        let thisView = this;\r\n        monster.addEventListener('dragstart', function(e) {\r\n            thisView.monsterDragstart(e, controller);\r\n        });\r\n\r\n    }\r\n\r\n    monsterDragstart( event, controller ) {\r\n        console.log('parent-drag');\r\n        \r\n        event.dataTransfer.setData(\"draggable\", event.target.id);\r\n\r\n        event.target.style.transform = 'translate(0, 0)';\r\n        event.dataTransfer.setDragImage(event.target, event.target.offsetWidth/2, event.target.offsetHeight/2);\r\n\r\n        if ( event.path[1].id == 'hdesign' ) {\r\n\r\n            controller.updateMonsterProperties( event.target.id, configuratorView.getValuesAsObject() );\r\n\r\n        }\r\n\r\n        event.stopPropagation();\r\n        \r\n    }\r\n\r\n    monsterClick( event, controller ) {\r\n        \r\n        console.log( controller.retrieveMonsterProperties( event.target.id ) );\r\n\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = new monsterView();\n\n//# sourceURL=webpack:///./src/views/monsterView.js?");

/***/ }),

/***/ "./src/views/terrainView.js":
/*!**********************************!*\
  !*** ./src/views/terrainView.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class terrainView {\r\n\r\n    emptyField() {\r\n        \r\n        let tiles = document.querySelector('#tiles');\r\n        while (tiles.firstChild) {\r\n            tiles.removeChild(tiles.firstChild);\r\n        }\r\n\r\n        let designer = document.querySelector('#hdesign');\r\n        while (designer.firstChild) {\r\n            designer.removeChild(designer.firstChild);\r\n        }\r\n\r\n    }\r\n    \r\n    drawField( monsterInDesigner ) {\r\n\r\n        for ( let i = 0; i < 10; i++ ) {\r\n            for ( let j = 0; j < 10; j++ ) {\r\n\r\n                let holder = document.createElement('div');\r\n                holder.setAttribute('class', 'holder bg-mat-100');\r\n                holder.setAttribute('id', 'h'+i+'-'+j);\r\n                document.querySelector('#tiles').appendChild(holder);\r\n\r\n                this.holderAddEventListener( holder );\r\n\r\n            }\r\n        }\r\n\r\n        let designHolder = document.querySelector('div#hdesign');\r\n        this.holderAddEventListener( designHolder );\r\n\r\n        if ( monsterInDesigner ) {\r\n            document.querySelector('div.creation').style.display = \"none\";\r\n        } else {\r\n            document.querySelector('button#createMonster').style.display = \"none\";\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    holderAddEventListener( holder ) {\r\n        holder.addEventListener(\"dragover\", this.holderDragOver);\r\n\r\n        holder.addEventListener(\"dragenter\", this.holderDragEnter);\r\n        holder.addEventListener(\"dragleave\", this.holderDragLeave);\r\n    }\r\n\r\n    holderDragOver( event ) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    holderDragEnter( event ) {\r\n        event.target.classList.add(\"holder-hover\");\r\n    }\r\n    holderDragLeave( event ) {\r\n        event.target.classList.remove(\"holder-hover\");\r\n    }\r\n\r\n\r\n    drawTerrain( climate ) {\r\n\r\n        for ( let i = 0; i < 10; i++ ) {\r\n            for ( let j = 0; j < 10; j++ ) {\r\n\r\n                if ( climate.grid[i].Columns[j] == 1 ) {\r\n                    let holder = document.querySelector('#h'+i+'-'+j);\r\n                    \r\n                    holder.classList.add(\"terrain\");\r\n                    \r\n                    holder.removeEventListener(\"drop\", this.holderDrop);\r\n                    holder.removeEventListener(\"dragover\", this.holderDragOver);\r\n                }\r\n\r\n            }   \r\n        }\r\n\r\n        this.setClimateClass( climate.name );\r\n\r\n    }\r\n\r\n\r\n    setClimateClass( name ) {\r\n        let outer = document.querySelector('div.container-fluid.outer');\r\n        outer.classList.remove('jungle');\r\n        outer.classList.remove('sjahari');\r\n        outer.classList.remove('icepole');\r\n\r\n        outer.classList.add( name.toLowerCase() );\r\n    }\r\n\r\n    setClimateChangeEventListeners( controller ) {\r\n        \r\n        document.querySelector('button.jungle-btn').addEventListener(\"click\", function(){\r\n            controller.setClimate( 'jungle' );\r\n        });\r\n        document.querySelector('button.sjahari-btn').addEventListener(\"click\", function(){\r\n            controller.setClimate( 'sjahari' );\r\n        });\r\n        document.querySelector('button.icepole-btn').addEventListener(\"click\", function(){\r\n            controller.setClimate( 'icepole' );\r\n        });\r\n\r\n    }\r\n\r\n\r\n    setWeatherBadge( weather ) {\r\n\r\n        document.querySelector('span.badge.weather').innerHTML = weather;\r\n\r\n    }\r\n\r\n    setWeatherEventListeners( controller ) {\r\n\r\n        document.querySelector('span.badge.weather').addEventListener(\"click\", function() {\r\n            \r\n            if ( document.querySelector('div.weather-dropdown').style.display == \"block\" ) {\r\n                document.querySelector('div.weather-dropdown').style.display = \"none\";\r\n            } else {\r\n                document.querySelector('div.weather-dropdown').style.display = \"block\";\r\n            }\r\n\r\n        });\r\n\r\n        this.setWeatherChangeEventListeners( controller );\r\n\r\n    }\r\n\r\n    setWeatherChangeEventListeners( controller ) {\r\n\r\n        let weatherSpans = document.querySelectorAll('div.weather-dropdown span');\r\n        for ( let i = 0; i < weatherSpans.length; i++ ) {\r\n            \r\n            weatherSpans[i].addEventListener(\"click\", function() {\r\n                controller.setWeather( weatherSpans[i].innerHTML );\r\n\r\n                document.querySelector('div.weather-dropdown').style.display = \"none\";\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    getHolderPosition( x, y ) {\r\n\r\n        if ( x == 'designer' && y == 'designer' ) {\r\n            return document.querySelector('#hdesign');\r\n        } else {\r\n            return document.querySelector('#h'+x+'-'+y);\r\n        }\r\n\r\n    }\r\n\r\n    setMonsterPositionEventListeners( controller, climate ) {\r\n\r\n        let thisView = this;\r\n\r\n        for( let i = 0; i < 10; i++ ) {\r\n            for( let j = 0; j < 10; j++ ) {\r\n                if ( climate.grid[i].Columns[j] == 0 ) {\r\n                    let holder = document.querySelector('#h'+i+'-'+j);\r\n                    \r\n                    holder.addEventListener(\"drop\",  function(event) {\r\n                        thisView.monsterDropEventListener( event, 'xy', controller );\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        let designHolder = document.querySelector('div.holder.design')\r\n        designHolder.addEventListener(\"drop\",  function(event) {\r\n            thisView.monsterDropEventListener( event, 'designer', controller );\r\n        });\r\n\r\n    }\r\n\r\n    monsterDropEventListener( event, position, controller ) {\r\n        let data = event.dataTransfer.getData(\"draggable\");\r\n\r\n        if ( event.target.id.charAt(0) == 'h' && event.target.childElementCount == 0 ) {\r\n            event.target.appendChild(document.getElementById(data));\r\n\r\n            let x, y;\r\n            if ( position == 'designer' ) {\r\n                x = 'designer',\r\n                y = 'designer';\r\n            } else {\r\n                x = event.target.id.charAt(1),\r\n                y = event.target.id.charAt(3);\r\n            }\r\n\r\n            controller.monsterChangedPosition(\r\n                data, \r\n                x, y\r\n            );\r\n        }\r\n\r\n        event.target.classList.remove(\"holder-hover\");\r\n    }\r\n    \r\n\r\n    setupMonsterConfigurator( controller ) {\r\n\r\n        document.querySelector('button#createMonster').addEventListener('click', function() {\r\n            document.querySelector('button#createMonster').style.display = \"none\";\r\n            document.querySelector('div.creation').style.display = \"block\";\r\n            \r\n            return controller.createNewMonster();\r\n        });\r\n\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = new terrainView();\n\n//# sourceURL=webpack:///./src/views/terrainView.js?");

/***/ })

/******/ });